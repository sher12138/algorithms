#!/usr/bin/python
from __future__ import print_function

import os
import sys
import json
import shutil
import filecmp

file_comments = """/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */
"""
cpp_str = ""

def generate_header(input_file, output_dir, namespace_key):
  if not os.path.exists(input_file):
    print(input_file," not exist!!!")
    return
  global dynamic_map
  file_name = "auto_"+os.path.splitext(input_file.split("/")[-1])[0]
  struct_name = file_name.replace('_', ' ').title().replace(' ', '')
  print(file_name,struct_name)
  header_str = file_comments+"\n\n"
  header_str += "#pragma once\n\n"
  header_str += "#include <string>\n"
  header_str += "#include <vector>\n"
  header_str += "#include <unordered_map>\n"
  header_str += "#include <jsoncpp/json/json.h>\n\n"
  header_str += "namespace neodrive {\n"
  header_str += "namespace "+namespace_key+"{\n"
  header_str += "namespace config {\n\n"
  struct_str = ""
  struct_str += "struct "+struct_name+" {\n"
  with open(input_file, 'r') as f:
    input_json = json.load(f)
    for group_name in input_json.keys():
      group_struct_name = group_name.replace('_', ' ').title().replace(' ', '')
      struct_str += "struct " + group_struct_name + " {\n"
      for idx in range(0,len(input_json[group_name])):
        for param_name in input_json[group_name][idx].keys():
          val_type = type(input_json[group_name][idx][param_name][0])
          if val_type == str:
            struct_str += "std::string " + param_name + ";\n"
          elif val_type == bool:
            struct_str += "bool " + param_name + ";\n"
          elif val_type == int:
            struct_str += "int " + param_name + ";\n"
          elif val_type == float:
            struct_str += "float " + param_name + ";\n"
          else:
            print("================ ERROR type: ", val_type)
            return
      struct_str += "};\n"
      struct_str += group_struct_name + ' ' + group_name + ";\n"
  struct_str += "};\n\n"
  header_str += struct_str
  header_str += "void Init"+struct_name+"(const Json::Value &input_json, "+struct_name+" &dest);\n"
  header_str += "}  // namespace config\n"
  header_str += "}  // namespace "+namespace_key+"\n"
  header_str += "}  // namespace neodrive\n"
  output_file = output_dir+"/"+file_name+".h"
  tmp_output_file = output_dir+"/tmp_"+file_name+".h"
  with open(tmp_output_file, 'w') as f:
    f.write(header_str)
  cmd = "/usr/bin/clang-format -style=Google -i " + tmp_output_file
  # print(cmd)
  result = os.system(cmd)
  if not os.path.exists(output_file):
    print("generate new file:", output_file)
    shutil.move(tmp_output_file, output_file)
  elif not filecmp.cmp(tmp_output_file, output_file):
    print("generate new file:", output_file)
    shutil.move(tmp_output_file, output_file)
  else:
    os.remove(tmp_output_file)

def generate_cpp(input_file, output_dir, namespace_key):
  global cpp_str
  cpp_str = ""
  if not os.path.exists(input_file):
    print(input_file," not exist!!!")
    return
  file_name = "auto_"+os.path.splitext(input_file.split("/")[-1])[0]
  struct_name = file_name.replace('_', ' ').title().replace(' ', '')
  # print(struct_name)
  cpp_str += file_comments+"\n\n"
  cpp_str += "#include \"config/"+file_name+".h\"\n\n"
  cpp_str += "namespace neodrive {\n"
  cpp_str += "namespace "+namespace_key+"{\n"
  cpp_str += "namespace config {\n\n"
  cpp_str += "void Init"+struct_name+"(const Json::Value &input_json, "+struct_name+" &dest) {\n"
  with open(input_file, 'r') as f:
    input_json = json.load(f)
    for group_name in input_json.keys():
      for idx in range(0,len(input_json[group_name])):
        for param_name in input_json[group_name][idx].keys():
          val_type = type(input_json[group_name][idx][param_name][0])
          if val_type == str:
            cpp_str += "dest."+ group_name + "." + param_name + "=input_json[\"" + group_name +"\"]["+str(idx)+"][\""+param_name+ "\"][0].asString();\n"
          elif val_type == bool:
            cpp_str += "dest."+ group_name + "." + param_name + "=input_json[\"" + group_name +"\"]["+str(idx)+"][\""+param_name+ "\"][0].asBool();\n"
          elif val_type == int:
            cpp_str += "dest."+ group_name + "." + param_name + "=input_json[\"" + group_name +"\"]["+str(idx)+"][\""+param_name+ "\"][0].asInt();\n"
          elif val_type == float:
            cpp_str += "dest."+ group_name + "." + param_name + "=input_json[\"" + group_name +"\"]["+str(idx)+"][\""+param_name+ "\"][0].asDouble();\n"
          else:
            print("================ ERROR type: ", val_type)
            return
    cpp_str += "};\n"
  cpp_str += "}  // namespace config\n"
  cpp_str += "}  // namespace "+namespace_key+"\n"
  cpp_str += "}  // namespace neodrive\n"
  output_file = output_dir+"/"+file_name+".cpp"
  tmp_output_file = output_dir+"/tmp_"+file_name+".cpp"
  with open(tmp_output_file, 'w') as f:
    f.write(cpp_str)
  cmd = "/usr/bin/clang-format -style=Google -i " + tmp_output_file
  # print(cmd)
  result = os.system(cmd)
  if not os.path.exists(output_file):
    print("generate new file:", output_file)
    shutil.move(tmp_output_file, output_file)
  elif not filecmp.cmp(tmp_output_file, output_file):
    print("generate new file:", output_file)
    shutil.move(tmp_output_file, output_file)
  else:
    os.remove(tmp_output_file)

if __name__ == "__main__":
  if len(sys.argv) < 4:
    print("dynamic_json_to_cpp.py input_json_file out_put_files_folder namespace")

  else:
    generate_header(sys.argv[1], sys.argv[2], sys.argv[3])
    generate_cpp(sys.argv[1], sys.argv[2], sys.argv[3])