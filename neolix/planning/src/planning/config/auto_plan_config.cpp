/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#include "config/auto_plan_config.h"

namespace neodrive {
namespace planning {
namespace config {

void InitAutoPlanConfig(const Json::Value &input_json, AutoPlanConfig &dest) {
  dest.planning_node_name = input_json["planning_node_name"].asString();
  dest.motion_task_name = input_json["motion_task_name"].asString();
  dest.common.planning_data_path =
      input_json["common"]["planning_data_path"].asString();
  dest.common.planning_scene_special_configure_file =
      input_json["common"]["planning_scene_special_configure_file"].asString();
  dest.common.path_resolution =
      input_json["common"]["path_resolution"].asDouble();
  dest.common.path_parking_resolution =
      input_json["common"]["path_parking_resolution"].asDouble();
  dest.common.total_time = input_json["common"]["total_time"].asDouble();
  dest.common.delta_t = input_json["common"]["delta_t"].asDouble();
  dest.common.use_ref_line_limit =
      input_json["common"]["use_ref_line_limit"].asBool();
  dest.common.junction_max_speed =
      input_json["common"]["junction_max_speed"].asDouble();
  dest.common.crosswalk_max_speed =
      input_json["common"]["crosswalk_max_speed"].asDouble();
  dest.common.max_av_plus = input_json["common"]["max_av_plus"].asDouble();
  dest.common.max_av_minus = input_json["common"]["max_av_minus"].asDouble();
  dest.common.max_jerk_plus = input_json["common"]["max_jerk_plus"].asDouble();
  dest.common.max_jerk_minus =
      input_json["common"]["max_jerk_minus"].asDouble();
  dest.common.centric_accel_limit =
      input_json["common"]["centric_accel_limit"].asDouble();
  dest.common.spot_stop_speed =
      input_json["common"]["spot_stop_speed"].asDouble();
  dest.common.parking_speed = input_json["common"]["parking_speed"].asDouble();
  dest.common.reverse_speed = input_json["common"]["reverse_speed"].asDouble();
  dest.common.static_hard_distance =
      input_json["common"]["static_hard_distance"].asDouble();
  dest.common.dynamic_hard_distance =
      input_json["common"]["dynamic_hard_distance"].asDouble();
  dest.common.dynamic_nudge_speed_percent =
      input_json["common"]["dynamic_nudge_speed_percent"].asDouble();
  dest.common.static_nudge_max_speed =
      input_json["common"]["static_nudge_max_speed"].asDouble();
  dest.common.slope_consider_angle_degree =
      input_json["common"]["slope_consider_angle_degree"].asDouble();
  dest.common.add_reinforcement_learning_event =
      input_json["common"]["add_reinforcement_learning_event"].asBool();
  dest.common.closer_obs_distance_threshold =
      input_json["common"]["closer_obs_distance_threshold"].asDouble();
  dest.common.little_obs_area_threshold =
      input_json["common"]["little_obs_area_threshold"].asDouble();
  dest.common.dynamic_obs_speed_threshold =
      input_json["common"]["dynamic_obs_speed_threshold"].asDouble();
  dest.common.bias_to_right_lane_bound =
      input_json["common"]["bias_to_right_lane_bound"].asDouble();
  dest.common.bias_to_right_obs_bound =
      input_json["common"]["bias_to_right_obs_bound"].asDouble();
  dest.common.motorway_bias_to_obs_bound =
      input_json["common"]["motorway_bias_to_obs_bound"].asDouble();
  dest.common.motorway_bias_to_unmovable_obs_bound =
      input_json["common"]["motorway_bias_to_unmovable_obs_bound"].asDouble();
  dest.common.bias_to_right_in_turn =
      input_json["common"]["bias_to_right_in_turn"].asDouble();
  dest.common.only_for_single_cipv =
      input_json["common"]["only_for_single_cipv"].asBool();
  dest.common.enable_camera_lines =
      input_json["common"]["enable_camera_lines"].asBool();
  dest.common.enable_camera_lines_in_junction =
      input_json["common"]["enable_camera_lines_in_junction"].asBool();
  dest.common.enable_back_cipv =
      input_json["common"]["enable_back_cipv"].asBool();
  dest.common.destination_virtual_obs_buffer =
      input_json["common"]["destination_virtual_obs_buffer"].asDouble();
  dest.common.use_center_pose =
      input_json["common"]["use_center_pose"].asBool();
  dest.map.planning_base_map_path =
      input_json["map"]["planning_base_map_path"].asString();
  dest.map.planning_map_dir = input_json["map"]["planning_map_dir"].asString();
  dest.speed_plan.check_collision_with_prediction_trajectory =
      input_json["speed_plan"]["check_collision_with_prediction_trajectory"]
          .asBool();
  dest.speed_plan.predict_trajectory_time =
      input_json["speed_plan"]["predict_trajectory_time"].asDouble();
  dest.speed_plan.max_predict_trajectory_dis =
      input_json["speed_plan"]["max_predict_trajectory_dis"].asDouble();
  dest.speed_plan.speed_delta_and_headingdiff_ratio =
      input_json["speed_plan"]["speed_delta_and_headingdiff_ratio"].asDouble();
  dest.speed_plan.filter_dynamic_obs_safe_distance_ratio =
      input_json["speed_plan"]["filter_dynamic_obs_safe_distance_ratio"]
          .asDouble();
  dest.speed_plan.turn_left_min_kappa =
      input_json["speed_plan"]["turn_left_min_kappa"].asDouble();
  dest.speed_plan.turn_left_check_sector_radius =
      input_json["speed_plan"]["turn_left_check_sector_radius"].asInt();
  dest.speed_plan.left_turn_front_extend =
      input_json["speed_plan"]["left_turn_front_extend"].asDouble();
  dest.speed_plan.left_turn_back_extend =
      input_json["speed_plan"]["left_turn_back_extend"].asDouble();
  dest.speed_plan.left_turn_min_len_threshold =
      input_json["speed_plan"]["left_turn_min_len_threshold"].asDouble();
  dest.speed_plan.dynamic_obs_area_min_length =
      input_json["speed_plan"]["dynamic_obs_area_min_length"].asDouble();
  dest.speed_plan.dynamic_obs_area_min_time =
      input_json["speed_plan"]["dynamic_obs_area_min_time"].asDouble();
  dest.speed_plan.uniform_trajectory_attention_lon_time =
      input_json["speed_plan"]["uniform_trajectory_attention_lon_time"]
          .asDouble();
  dest.speed_plan.uniform_trajectory_attention_lat_time =
      input_json["speed_plan"]["uniform_trajectory_attention_lat_time"]
          .asDouble();
  dest.speed_plan.turn_right_max_kappa =
      input_json["speed_plan"]["turn_right_max_kappa"].asDouble();
  dest.speed_plan.turn_right_check_sector_radius =
      input_json["speed_plan"]["turn_right_check_sector_radius"].asInt();
  dest.speed_plan.right_turn_front_extend =
      input_json["speed_plan"]["right_turn_front_extend"].asDouble();
  dest.speed_plan.right_turn_back_extend =
      input_json["speed_plan"]["right_turn_back_extend"].asDouble();
  dest.speed_plan.right_turn_min_len_threshold =
      input_json["speed_plan"]["right_turn_min_len_threshold"].asDouble();
  dest.speed_plan.judge_turn_min_time =
      input_json["speed_plan"]["judge_turn_min_time"].asDouble();
  dest.speed_plan.judge_turn_min_length =
      input_json["speed_plan"]["judge_turn_min_length"].asDouble();
  dest.speed_plan.judge_turn_min_kappa =
      input_json["speed_plan"]["judge_turn_min_kappa"].asDouble();
  dest.speed_plan.judge_turn_continuous_point_num =
      input_json["speed_plan"]["judge_turn_continuous_point_num"].asInt();
  dest.inlane_uturn.inlane_uturn_common.delta_t =
      input_json["inlane_uturn"]["inlane_uturn_common"]["delta_t"].asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_forward_v =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_forward_v"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_reverse_v =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_reverse_v"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_forward_acc =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_forward_acc"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_reverse_acc =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_reverse_acc"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_acc_jerk =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_acc_jerk"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.path_resolution =
      input_json["inlane_uturn"]["inlane_uturn_common"]["path_resolution"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.park_spot_depth_buffer =
      input_json["inlane_uturn"]["inlane_uturn_common"]
                ["park_spot_depth_buffer"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_common.path_time_resolution =
      input_json["inlane_uturn"]["inlane_uturn_common"]["path_time_resolution"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_common.max_steering_angle =
      input_json["inlane_uturn"]["inlane_uturn_common"]["max_steering_angle"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.xy_grid_resolution =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["xy_grid_resolution"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.phi_grid_resolution =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["phi_grid_resolution"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.step_size =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["step_size"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.next_node_num =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["next_node_num"]
          .asInt();
  dest.inlane_uturn.inlane_uturn_hybrid_a.traj_forward_penalty =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["traj_forward_penalty"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.traj_back_penalty =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["traj_back_penalty"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.traj_gear_switch_penalty =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["traj_gear_switch_penalty"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.traj_steer_penalty =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["traj_steer_penalty"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.traj_steer_change_penalty =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["traj_steer_change_penalty"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.grid_a_star_xy_resolution =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["grid_a_star_xy_resolution"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.node_radius =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["node_radius"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.verbose =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["verbose"].asBool();
  dest.inlane_uturn.inlane_uturn_hybrid_a.use_s_curve_speed_smooth =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["use_s_curve_speed_smooth"]
                    .asBool();
  dest.inlane_uturn.inlane_uturn_hybrid_a.enable_parallel_hybrid_a =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["enable_parallel_hybrid_a"]
                    .asBool();
  dest.inlane_uturn.inlane_uturn_hybrid_a.enable_optimal_path_selector =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["enable_optimal_path_selector"]
                    .asBool();
  dest.inlane_uturn.inlane_uturn_hybrid_a.rs_length_cost =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["rs_length_cost"]
          .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.rs_first_left_right_compliance_cost =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["rs_first_left_right_compliance_cost"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.rs_backward_length_cost =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["rs_backward_length_cost"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.rs_first_backward_cost =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]
                ["rs_first_backward_cost"]
                    .asDouble();
  dest.inlane_uturn.inlane_uturn_hybrid_a.rs_gear_switch_cost =
      input_json["inlane_uturn"]["inlane_uturn_hybrid_a"]["rs_gear_switch_cost"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.delta_t =
      input_json["outlane_uturn"]["outlane_uturn_common"]["delta_t"].asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_forward_v =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_forward_v"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_reverse_v =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_reverse_v"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_forward_acc =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_forward_acc"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_reverse_acc =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_reverse_acc"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_acc_jerk =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_acc_jerk"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.path_resolution =
      input_json["outlane_uturn"]["outlane_uturn_common"]["path_resolution"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_common.park_spot_depth_buffer =
      input_json["outlane_uturn"]["outlane_uturn_common"]
                ["park_spot_depth_buffer"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_common.path_time_resolution =
      input_json["outlane_uturn"]["outlane_uturn_common"]
                ["path_time_resolution"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_common.max_steering_angle =
      input_json["outlane_uturn"]["outlane_uturn_common"]["max_steering_angle"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.xy_grid_resolution =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["xy_grid_resolution"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.phi_grid_resolution =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["phi_grid_resolution"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.step_size =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["step_size"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.next_node_num =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["next_node_num"]
          .asInt();
  dest.outlane_uturn.outlane_uturn_hybrid_a.traj_forward_penalty =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["traj_forward_penalty"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.traj_back_penalty =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["traj_back_penalty"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.traj_gear_switch_penalty =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["traj_gear_switch_penalty"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.traj_steer_penalty =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["traj_steer_penalty"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.traj_steer_change_penalty =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["traj_steer_change_penalty"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.grid_a_star_xy_resolution =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["grid_a_star_xy_resolution"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.node_radius =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["node_radius"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.verbose =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["verbose"].asBool();
  dest.outlane_uturn.outlane_uturn_hybrid_a.use_s_curve_speed_smooth =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["use_s_curve_speed_smooth"]
                    .asBool();
  dest.outlane_uturn.outlane_uturn_hybrid_a.enable_parallel_hybrid_a =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["enable_parallel_hybrid_a"]
                    .asBool();
  dest.outlane_uturn.outlane_uturn_hybrid_a.enable_optimal_path_selector =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["enable_optimal_path_selector"]
                    .asBool();
  dest.outlane_uturn.outlane_uturn_hybrid_a.rs_length_cost =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]["rs_length_cost"]
          .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a
      .rs_first_left_right_compliance_cost =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["rs_first_left_right_compliance_cost"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.rs_backward_length_cost =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["rs_backward_length_cost"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.rs_first_backward_cost =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["rs_first_backward_cost"]
                    .asDouble();
  dest.outlane_uturn.outlane_uturn_hybrid_a.rs_gear_switch_cost =
      input_json["outlane_uturn"]["outlane_uturn_hybrid_a"]
                ["rs_gear_switch_cost"]
                    .asDouble();
  dest.pilot_state.alarm_escalation_interval =
      input_json["pilot_state"]["alarm_escalation_interval"].asDouble();
  dest.pilot_state.degradation_speed_limit =
      input_json["pilot_state"]["degradation_speed_limit"].asDouble();
  dest.pilot_state.system_start_time =
      input_json["pilot_state"]["system_start_time"].asDouble();
  dest.pilot_state.frequent_degradation_interval =
      input_json["pilot_state"]["frequent_degradation_interval"].asDouble();
  dest.pilot_state.normal_upgradation_interval =
      input_json["pilot_state"]["normal_upgradation_interval"].asDouble();
  dest.pilot_state.escalation_hold_interval =
      input_json["pilot_state"]["escalation_hold_interval"].asDouble();
  dest.pilot_state.smooth_brake_brake_speed =
      input_json["pilot_state"]["smooth_brake_brake_speed"].asDouble();
  dest.pilot_state.smooth_brake_speed_limit_step =
      input_json["pilot_state"]["smooth_brake_speed_limit_step"].asDouble();
  dest.pilot_state.lidar_perception_error_threshold =
      input_json["pilot_state"]["lidar_perception_error_threshold"].asDouble();
  dest.pilot_state.odom_sensor_delay_threshold =
      input_json["pilot_state"]["odom_sensor_delay_threshold"].asDouble();
  dest.pilot_state.utm_sensor_delay_threshold =
      input_json["pilot_state"]["utm_sensor_delay_threshold"].asDouble();
  dest.pilot_state.localization_msg_delay_threshold =
      input_json["pilot_state"]["localization_msg_delay_threshold"].asDouble();
  dest.pilot_state.perception_msg_delay_threshold =
      input_json["pilot_state"]["perception_msg_delay_threshold"].asDouble();
  dest.pilot_state.localization_position_jump_threshold =
      input_json["pilot_state"]["localization_position_jump_threshold"]
          .asDouble();
  dest.pilot_state.lidar_freespace_empty_threshold =
      input_json["pilot_state"]["lidar_freespace_empty_threshold"].asInt();
  dest.pilot_state.lidar_non_point_low_speed_limit =
      input_json["pilot_state"]["lidar_non_point_low_speed_limit"].asDouble();
  dest.pilot_state.lidar_non_point_medium_speed_limit =
      input_json["pilot_state"]["lidar_non_point_medium_speed_limit"]
          .asDouble();
  dest.pilot_state.lidar_non_point_high_speed_limit =
      input_json["pilot_state"]["lidar_non_point_high_speed_limit"].asDouble();
  dest.pilot_state.odom_wheel_error_cnt_threshold =
      input_json["pilot_state"]["odom_wheel_error_cnt_threshold"].asInt();
  dest.narrow_road_scenario.narrow_road_width_threshold =
      input_json["narrow_road_scenario"]["narrow_road_width_threshold"]
          .asDouble();
  dest.narrow_road_scenario.exit_narrow_road_width_buffer =
      input_json["narrow_road_scenario"]["exit_narrow_road_width_buffer"]
          .asDouble();
  dest.narrow_road_scenario.preview_distance =
      input_json["narrow_road_scenario"]["preview_distance"].asDouble();
  dest.intersection_scenario.approach_distance_threshold =
      input_json["intersection_scenario"]["approach_distance_threshold"]
          .asDouble();
  dest.intersection_scenario.approach_time_threshold =
      input_json["intersection_scenario"]["approach_time_threshold"].asDouble();
  dest.intersection_scenario.leave_distance_threshold =
      input_json["intersection_scenario"]["leave_distance_threshold"]
          .asDouble();
  dest.intersection_scenario.traffic_light_distance_threshold =
      input_json["intersection_scenario"]["traffic_light_distance_threshold"]
          .asDouble();
  dest.intersection_scenario.detect_length =
      input_json["intersection_scenario"]["detect_length"].asInt();
  dest.intersection_scenario.kappa_threshold =
      input_json["intersection_scenario"]["kappa_threshold"].asDouble();
  dest.side_way_intersection_scenario.enable_side_way_intersection =
      input_json["side_way_intersection_scenario"]
                ["enable_side_way_intersection"]
                    .asBool();
  dest.side_way_intersection_scenario.crossroad_preview_distance =
      input_json["side_way_intersection_scenario"]["crossroad_preview_distance"]
          .asDouble();
  dest.side_way_intersection_scenario.traffic_light_preview_distance =
      input_json["side_way_intersection_scenario"]
                ["traffic_light_preview_distance"]
                    .asDouble();
  dest.cruise_scenario.enable_bias_drive =
      input_json["cruise_scenario"]["enable_bias_drive"].asBool();
  dest.cruise_scenario.enable_left_overtake =
      input_json["cruise_scenario"]["enable_left_overtake"].asBool();
  dest.cruise_scenario.enable_right_avoid =
      input_json["cruise_scenario"]["enable_right_avoid"].asBool();
  dest.cruise_scenario.right_road_buff =
      input_json["cruise_scenario"]["right_road_buff"].asDouble();
  dest.cruise_scenario.right_avoid_buff =
      input_json["cruise_scenario"]["right_avoid_buff"].asDouble();
  dest.cruise_scenario.left_road_buff =
      input_json["cruise_scenario"]["left_road_buff"].asDouble();
  dest.cruise_scenario.left_overtake_buff =
      input_json["cruise_scenario"]["left_overtake_buff"].asDouble();
  dest.cruise_scenario.filter_frame_threshold =
      input_json["cruise_scenario"]["filter_frame_threshold"].asInt();
  dest.motorway_cruise_scenario.driving_direction =
      input_json["motorway_cruise_scenario"]["driving_direction"].asInt();
  dest.motorway_cruise_scenario.filter_frame_threshold =
      input_json["motorway_cruise_scenario"]["filter_frame_threshold"].asInt();
  dest.motorway_detour_scenario.driving_direction =
      input_json["motorway_detour_scenario"]["driving_direction"].asInt();
  dest.motorway_detour_scenario.preview_front_distance =
      input_json["motorway_detour_scenario"]["preview_front_distance"]
          .asDouble();
  dest.motorway_detour_scenario.preview_back_distance =
      input_json["motorway_detour_scenario"]["preview_back_distance"]
          .asDouble();
  dest.motorway_detour_scenario.near_front_distance =
      input_json["motorway_detour_scenario"]["near_front_distance"].asDouble();
  dest.motorway_detour_scenario.near_back_distance =
      input_json["motorway_detour_scenario"]["near_back_distance"].asDouble();
  dest.motorway_detour_scenario.preview_time =
      input_json["motorway_detour_scenario"]["preview_time"].asDouble();
  dest.motorway_detour_scenario.preview_distance =
      input_json["motorway_detour_scenario"]["preview_distance"].asDouble();
  dest.motorway_detour_scenario.adjacent_lanes_preview_distance =
      input_json["motorway_detour_scenario"]["adjacent_lanes_preview_distance"]
          .asDouble();
  dest.motorway_detour_scenario.left_min_lane_borrow_dis =
      input_json["motorway_detour_scenario"]["left_min_lane_borrow_dis"]
          .asDouble();
  dest.motorway_detour_scenario.left_max_lane_borrow_dis =
      input_json["motorway_detour_scenario"]["left_max_lane_borrow_dis"]
          .asDouble();
  dest.motorway_detour_scenario.right_min_lane_borrow_dis =
      input_json["motorway_detour_scenario"]["right_min_lane_borrow_dis"]
          .asDouble();
  dest.motorway_detour_scenario.right_max_lane_borrow_dis =
      input_json["motorway_detour_scenario"]["right_max_lane_borrow_dis"]
          .asDouble();
  dest.motorway_detour_scenario.right_first_line_preview_distance =
      input_json["motorway_detour_scenario"]
                ["right_first_line_preview_distance"]
                    .asDouble();
  dest.motorway_detour_scenario.filter_obs_heading_threshold =
      input_json["motorway_detour_scenario"]["filter_obs_heading_threshold"]
          .asDouble();
  dest.motorway_detour_scenario.detour_triggered_space =
      input_json["motorway_detour_scenario"]["detour_triggered_space"]
          .asDouble();
  dest.motorway_detour_scenario.queued_crossroad_check =
      input_json["motorway_detour_scenario"]["queued_crossroad_check"].asBool();
  dest.motorway_detour_scenario.preview_road_bound_close_ignore_distance =
      input_json["motorway_detour_scenario"]
                ["preview_road_bound_close_ignore_distance"]
                    .asDouble();
  dest.motorway_detour_scenario.preview_crossroad_close_ignore_distance =
      input_json["motorway_detour_scenario"]
                ["preview_crossroad_close_ignore_distance"]
                    .asDouble();
  dest.motorway_detour_scenario.preview_lane_turn_close_ignore_distance =
      input_json["motorway_detour_scenario"]
                ["preview_lane_turn_close_ignore_distance"]
                    .asDouble();
  dest.motorway_detour_scenario.detour_enter_scenario
      .crossroad_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["crossroad_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_enter_scenario
      .queued_crossroad_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["queued_crossroad_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_enter_scenario
      .traffic_light_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["traffic_light_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_enter_scenario
      .queued_traffic_light_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["queued_traffic_light_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_enter_scenario
      .road_bound_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["road_bound_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_enter_scenario
      .lane_turn_preview_distance =
      input_json["motorway_detour_scenario"]["detour_enter_scenario"]
                ["lane_turn_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .crossroad_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["crossroad_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .queued_crossroad_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["queued_crossroad_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .traffic_light_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["traffic_light_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .queued_traffic_light_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["queued_traffic_light_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .road_bound_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["road_bound_preview_distance"]
                    .asInt();
  dest.motorway_detour_scenario.detour_exit_scenario
      .lane_turn_preview_distance =
      input_json["motorway_detour_scenario"]["detour_exit_scenario"]
                ["lane_turn_preview_distance"]
                    .asInt();
  dest.motorway_intersection_scenario.signal_detect_distance =
      input_json["motorway_intersection_scenario"]["signal_detect_distance"]
          .asDouble();
  dest.motorway_intersection_scenario.lanetype_detect_distance =
      input_json["motorway_intersection_scenario"]["lanetype_detect_distance"]
          .asDouble();
  dest.detour_scenario.driving_direction =
      input_json["detour_scenario"]["driving_direction"].asInt();
  dest.detour_scenario.preview_front_distance =
      input_json["detour_scenario"]["preview_front_distance"].asDouble();
  dest.detour_scenario.preview_back_distance =
      input_json["detour_scenario"]["preview_back_distance"].asDouble();
  dest.detour_scenario.near_front_distance =
      input_json["detour_scenario"]["near_front_distance"].asDouble();
  dest.detour_scenario.near_back_distance =
      input_json["detour_scenario"]["near_back_distance"].asDouble();
  dest.detour_scenario.preview_time =
      input_json["detour_scenario"]["preview_time"].asDouble();
  dest.detour_scenario.preview_distance =
      input_json["detour_scenario"]["preview_distance"].asDouble();
  dest.detour_scenario.left_min_lane_borrow_dis =
      input_json["detour_scenario"]["left_min_lane_borrow_dis"].asDouble();
  dest.detour_scenario.left_max_lane_borrow_dis =
      input_json["detour_scenario"]["left_max_lane_borrow_dis"].asDouble();
  dest.detour_scenario.right_min_lane_borrow_dis =
      input_json["detour_scenario"]["right_min_lane_borrow_dis"].asDouble();
  dest.detour_scenario.right_max_lane_borrow_dis =
      input_json["detour_scenario"]["right_max_lane_borrow_dis"].asDouble();
  dest.detour_scenario.detour_triggered_space =
      input_json["detour_scenario"]["detour_triggered_space"].asDouble();
  dest.detour_scenario.filter_obs_heading_threshold =
      input_json["detour_scenario"]["filter_obs_heading_threshold"].asDouble();
  dest.detour_scenario.queued_crossroad_check =
      input_json["detour_scenario"]["queued_crossroad_check"].asBool();
  dest.detour_scenario.preview_road_bound_close_ignore_distance =
      input_json["detour_scenario"]["preview_road_bound_close_ignore_distance"]
          .asDouble();
  dest.detour_scenario.preview_crossroad_close_ignore_distance =
      input_json["detour_scenario"]["preview_crossroad_close_ignore_distance"]
          .asDouble();
  dest.detour_scenario.detour_enter_scenario.crossroad_preview_distance =
      input_json["detour_scenario"]["detour_enter_scenario"]
                ["crossroad_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_enter_scenario.queued_crossroad_preview_distance =
      input_json["detour_scenario"]["detour_enter_scenario"]
                ["queued_crossroad_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_enter_scenario.traffic_light_preview_distance =
      input_json["detour_scenario"]["detour_enter_scenario"]
                ["traffic_light_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_enter_scenario
      .queued_traffic_light_preview_distance =
      input_json["detour_scenario"]["detour_enter_scenario"]
                ["queued_traffic_light_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_enter_scenario.road_bound_preview_distance =
      input_json["detour_scenario"]["detour_enter_scenario"]
                ["road_bound_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_exit_scenario.crossroad_preview_distance =
      input_json["detour_scenario"]["detour_exit_scenario"]
                ["crossroad_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_exit_scenario.queued_crossroad_preview_distance =
      input_json["detour_scenario"]["detour_exit_scenario"]
                ["queued_crossroad_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_exit_scenario.traffic_light_preview_distance =
      input_json["detour_scenario"]["detour_exit_scenario"]
                ["traffic_light_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_exit_scenario
      .queued_traffic_light_preview_distance =
      input_json["detour_scenario"]["detour_exit_scenario"]
                ["queued_traffic_light_preview_distance"]
                    .asInt();
  dest.detour_scenario.detour_exit_scenario.road_bound_preview_distance =
      input_json["detour_scenario"]["detour_exit_scenario"]
                ["road_bound_preview_distance"]
                    .asInt();
  dest.parking.vertical_parking_space.front_dis_in_park =
      input_json["parking"]["vertical_parking_space"]["front_dis_in_park"]
          .asDouble();
  dest.parking.vertical_parking_space.c_type_front_dis_in_park =
      input_json["parking"]["vertical_parking_space"]
                ["c_type_front_dis_in_park"]
                    .asDouble();
  dest.parking.vertical_parking_space.boundary_dist =
      input_json["parking"]["vertical_parking_space"]["boundary_dist"]
          .asDouble();
  dest.parking.vertical_parking_space.soft_radius =
      input_json["parking"]["vertical_parking_space"]["soft_radius"].asDouble();
  dest.parking.vertical_parking_space.soft_bios =
      input_json["parking"]["vertical_parking_space"]["soft_bios"].asDouble();
  dest.parking.vertical_parking_space.prepare_radius =
      input_json["parking"]["vertical_parking_space"]["prepare_radius"]
          .asDouble();
  dest.parking.vertical_parking_space.dist_to_end =
      input_json["parking"]["vertical_parking_space"]["dist_to_end"].asDouble();
  dest.parking.vertical_parking_space.park_out_soft_radius =
      input_json["parking"]["vertical_parking_space"]["park_out_soft_radius"]
          .asDouble();
  dest.parking.vertical_parking_space.c_type_dis_threshold =
      input_json["parking"]["vertical_parking_space"]["c_type_dis_threshold"]
          .asDouble();
  dest.parking.vertical_parking_space.c_type_radius =
      input_json["parking"]["vertical_parking_space"]["c_type_radius"]
          .asDouble();
  dest.parking.vertical_parking_space.c_type_dist_to_end =
      input_json["parking"]["vertical_parking_space"]["c_type_dist_to_end"]
          .asDouble();
  dest.parking.vertical_parking_space.prediction_dis =
      input_json["parking"]["vertical_parking_space"]["prediction_dis"]
          .asDouble();
  dest.parking.vertical_parking_space.lateral_buffer =
      input_json["parking"]["vertical_parking_space"]["lateral_buffer"]
          .asDouble();
  dest.parking.vertical_parking_space.l_type_point_c_dis =
      input_json["parking"]["vertical_parking_space"]["l_type_point_c_dis"]
          .asDouble();
  dest.parking.vertical_parking_space.l_type_dist_to_end =
      input_json["parking"]["vertical_parking_space"]["l_type_dist_to_end"]
          .asDouble();
  dest.parking.vertical_parking_space.park_out_extend_length =
      input_json["parking"]["vertical_parking_space"]["park_out_extend_length"]
          .asDouble();
  dest.parking.vertical_parking_space.theta =
      input_json["parking"]["vertical_parking_space"]["theta"].asDouble();
  dest.parking.vertical_parking_space.parking_space_lateral_buffer =
      input_json["parking"]["vertical_parking_space"]
                ["parking_space_lateral_buffer"]
                    .asDouble();
  dest.parking.vertical_parking_space.parking_space_vertical_buffer =
      input_json["parking"]["vertical_parking_space"]
                ["parking_space_vertical_buffer"]
                    .asDouble();
  dest.parking.vertical_parking_space.min_speed =
      input_json["parking"]["vertical_parking_space"]["min_speed"].asDouble();
  dest.parking.vertical_parking_space.degree_buffer =
      input_json["parking"]["vertical_parking_space"]["degree_buffer"]
          .asDouble();
  dest.parking.horizontal_parking_space.dist_to_end =
      input_json["parking"]["horizontal_parking_space"]["dist_to_end"]
          .asDouble();
  dest.parking.horizontal_parking_space.front_safe_dist =
      input_json["parking"]["horizontal_parking_space"]["front_safe_dist"]
          .asDouble();
  dest.parking.horizontal_parking_space.back_safe_dist =
      input_json["parking"]["horizontal_parking_space"]["back_safe_dist"]
          .asDouble();
  dest.parking.horizontal_parking_space.front_offset =
      input_json["parking"]["horizontal_parking_space"]["front_offset"]
          .asDouble();
  dest.parking.horizontal_parking_space.back_offset =
      input_json["parking"]["horizontal_parking_space"]["back_offset"]
          .asDouble();
  dest.parking.horizontal_parking_space.finish_heading_threshold =
      input_json["parking"]["horizontal_parking_space"]
                ["finish_heading_threshold"]
                    .asDouble();
  dest.parking.horizontal_parking_space.parking_space_vertical_buffer =
      input_json["parking"]["horizontal_parking_space"]
                ["parking_space_vertical_buffer"]
                    .asDouble();
  dest.parking.horizontal_parking_space.forward_max_speed =
      input_json["parking"]["horizontal_parking_space"]["forward_max_speed"]
          .asDouble();
  dest.parking.horizontal_parking_space.backward_max_speed =
      input_json["parking"]["horizontal_parking_space"]["backward_max_speed"]
          .asDouble();
  dest.parking.horizontal_parking_space.lane_ignore_dis_threshold =
      input_json["parking"]["horizontal_parking_space"]
                ["lane_ignore_dis_threshold"]
                    .asDouble();
  dest.parking.onlane_parking_space.dis_to_end =
      input_json["parking"]["onlane_parking_space"]["dis_to_end"].asDouble();
  dest.parking.onlane_parking_space.extern_dis =
      input_json["parking"]["onlane_parking_space"]["extern_dis"].asDouble();
  dest.parking.parking_in_max_speed =
      input_json["parking"]["parking_in_max_speed"].asDouble();
  dest.parking.parking_out_max_speed =
      input_json["parking"]["parking_out_max_speed"].asDouble();
  dest.parking.parking_out_kappa_threshold =
      input_json["parking"]["parking_out_kappa_threshold"].asDouble();
  dest.parking.parkint_out_default_speed =
      input_json["parking"]["parkint_out_default_speed"].asDouble();
  dest.parking.parking_out_speed_in_turn =
      input_json["parking"]["parking_out_speed_in_turn"].asDouble();
  dest.parking.prediction_dis =
      input_json["parking"]["prediction_dis"].asDouble();
  dest.parking.lateral_buffer =
      input_json["parking"]["lateral_buffer"].asDouble();
  dest.parking.preview_dis = input_json["parking"]["preview_dis"].asDouble();
  dest.parking.path_detect = input_json["parking"]["path_detect"].asBool();
  dest.parking.steering_detect =
      input_json["parking"]["steering_detect"].asBool();
  dest.parking.heading_detect =
      input_json["parking"]["heading_detect"].asBool();
  dest.parking.heading_detect_pre_dis =
      input_json["parking"]["heading_detect_pre_dis"].asDouble();
  dest.parking.default_speed =
      input_json["parking"]["default_speed"].asDouble();
  dest.parking.heading_diff_threshold =
      input_json["parking"]["heading_diff_threshold"].asDouble();
  dest.parking.high_dis_error_threshold =
      input_json["parking"]["high_dis_error_threshold"].asDouble();
  dest.parking.low_dis_error_threshold =
      input_json["parking"]["low_dis_error_threshold"].asDouble();
  dest.parking.high_dis_error_speed =
      input_json["parking"]["high_dis_error_speed"].asDouble();
  dest.parking.low_dis_error_speed =
      input_json["parking"]["low_dis_error_speed"].asDouble();
  dest.parking.parking_in_detect_max_dis =
      input_json["parking"]["parking_in_detect_max_dis"].asDouble();
  dest.parking.forward_max_speed =
      input_json["parking"]["forward_max_speed"].asDouble();
  dest.parking.backward_max_speed =
      input_json["parking"]["backward_max_speed"].asDouble();
  dest.parking.max_jerk = input_json["parking"]["max_jerk"].asDouble();
  dest.parking.dist_slow_down_coef =
      input_json["parking"]["dist_slow_down_coef"].asDouble();
  dest.parking.heading_slow_down_coef =
      input_json["parking"]["heading_slow_down_coef"].asDouble();
  dest.parking.parking_slow_down_dist =
      input_json["parking"]["parking_slow_down_dist"].asDouble();
  dest.parking.stop_time_threhold =
      input_json["parking"]["stop_time_threhold"].asDouble();
  dest.parking.parking_stuck_speed_threshold =
      input_json["parking"]["parking_stuck_speed_threshold"].asDouble();
  dest.parking.camera_obs_filter_dis =
      input_json["parking"]["camera_obs_filter_dis"].asDouble();
  dest.parking.enable_camera_freespace =
      input_json["parking"]["enable_camera_freespace"].asBool();
  dest.indoor.lidar_freespace_max_distance =
      input_json["indoor"]["lidar_freespace_max_distance"].asDouble();
  dest.indoor.freespace_filter_length_threshold =
      input_json["indoor"]["freespace_filter_length_threshold"].asDouble();
  dest.indoor.freespace_filter_speed_threshold =
      input_json["indoor"]["freespace_filter_speed_threshold"].asDouble();
  dest.indoor.max_speed = input_json["indoor"]["max_speed"].asDouble();
  dest.indoor.low_speed = input_json["indoor"]["low_speed"].asDouble();
  dest.indoor.min_acc = input_json["indoor"]["min_acc"].asDouble();
  dest.indoor.max_acc = input_json["indoor"]["max_acc"].asDouble();
  dest.indoor.freespace_low_speed_dis_threshold =
      input_json["indoor"]["freespace_low_speed_dis_threshold"].asDouble();
  dest.indoor.freespace_stop_dis_threshold =
      input_json["indoor"]["freespace_stop_dis_threshold"].asDouble();
  dest.indoor.max_jerk = input_json["indoor"]["max_jerk"].asDouble();
  dest.indoor.centric_accel_limit =
      input_json["indoor"]["centric_accel_limit"].asDouble();
  dest.indoor.enable_obstacle =
      input_json["indoor"]["enable_obstacle"].asBool();
  dest.indoor.radius = input_json["indoor"]["radius"].asDouble();
  dest.indoor.steer_threshold = input_json["indoor"]["steer_threshold"].asInt();
  dest.record_event.emergency_brake_accel_threshold =
      input_json["record_event"]["emergency_brake_accel_threshold"].asDouble();
  dest.record_event.into_degradation_before_time_s =
      input_json["record_event"]["into_DEGRADATION_before_time_s"].asDouble();
  dest.record_event.into_degradation_after_time_s =
      input_json["record_event"]["into_DEGRADATION_after_time_s"].asDouble();
  dest.record_event.into_escalation_before_time_s =
      input_json["record_event"]["into_ESCALATION_before_time_s"].asDouble();
  dest.record_event.into_escalation_after_time_s =
      input_json["record_event"]["into_ESCALATION_after_time_s"].asDouble();
  dest.record_event.take_over_before_time_s =
      input_json["record_event"]["take_over_before_time_s"].asDouble();
  dest.record_event.take_over_after_time_s =
      input_json["record_event"]["take_over_after_time_s"].asDouble();
  dest.record_event.emergency_brake_before_time_s =
      input_json["record_event"]["emergency_brake_before_time_s"].asDouble();
  dest.record_event.emergency_brake_after_time_s =
      input_json["record_event"]["emergency_brake_after_time_s"].asDouble();
  dest.pull_over.early_check_queue_distance =
      input_json["pull_over"]["early_check_queue_distance"].asDouble();
  dest.pull_over.check_obstacle_distance =
      input_json["pull_over"]["check_obstacle_distance"].asDouble();
  dest.pull_over.stop_queue_vehicle_distance =
      input_json["pull_over"]["stop_queue_vehicle_distance"].asDouble();
  dest.pull_over.wujiang_stop_queue_vehicle_distance =
      input_json["pull_over"]["wujiang_stop_queue_vehicle_distance"].asDouble();
  dest.pull_over.check_stop_distance_to_boundary =
      input_json["pull_over"]["check_stop_distance_to_boundary"].asDouble();
  dest.pull_over.back_close_obs_distance =
      input_json["pull_over"]["back_close_obs_distance"].asDouble();
  dest.pull_over.allow_pull_over_max_speed =
      input_json["pull_over"]["allow_pull_over_max_speed"].asDouble();
  dest.pull_over.station_stop_deceleration_ratio =
      input_json["pull_over"]["station_stop_deceleration_ratio"].asDouble();
  dest.bias_driving.enable_road_has_bound_bias =
      input_json["bias_driving"]["enable_road_has_bound_bias"].asBool();
  dest.bias_driving.road_has_bound_residual =
      input_json["bias_driving"]["road_has_bound_residual"].asDouble();
  dest.bias_driving.road_bound_preview =
      input_json["bias_driving"]["road_bound_preview"].asDouble();
  dest.bias_driving.road_has_bound_max_width =
      input_json["bias_driving"]["road_has_bound_max_width"].asDouble();
  dest.bias_driving.front_junction_close_distance =
      input_json["bias_driving"]["front_junction_close_distance"].asDouble();
  dest.bias_driving.junction_concern_distance =
      input_json["bias_driving"]["junction_concern_distance"].asDouble();
  dest.bias_driving.lane_turn_preview_distance =
      input_json["bias_driving"]["lane_turn_preview_distance"].asDouble();
  dest.bias_driving.lane_turn_kappa_threshold =
      input_json["bias_driving"]["lane_turn_kappa_threshold"].asDouble();
  dest.bias_driving.min_shift_distance =
      input_json["bias_driving"]["min_shift_distance"].asDouble();
  dest.bias_driving.enable_board_road_bias =
      input_json["bias_driving"]["enable_board_road_bias"].asBool();
  dest.bias_driving.board_road_width_into_threshold =
      input_json["bias_driving"]["board_road_width_into_threshold"].asDouble();
  dest.bias_driving.board_road_width_exit_threshold =
      input_json["bias_driving"]["board_road_width_exit_threshold"].asDouble();
  dest.bias_driving.board_road_bias_residual =
      input_json["bias_driving"]["board_road_bias_residual"].asDouble();
  dest.bias_driving.side_far_obs_distance =
      input_json["bias_driving"]["side_far_obs_distance"].asDouble();
  dest.bias_driving.same_direction_heading_threshold =
      input_json["bias_driving"]["same_direction_heading_threshold"].asDouble();
  dest.bias_driving.slow_obs_velocity_threshold =
      input_json["bias_driving"]["slow_obs_velocity_threshold"].asDouble();
  dest.bias_driving.preview_back_close_distance =
      input_json["bias_driving"]["preview_back_close_distance"].asDouble();
  dest.bias_driving.preview_back_far_distance =
      input_json["bias_driving"]["preview_back_far_distance"].asDouble();
  dest.bias_driving.trigger_stop_need_pull_over =
      input_json["bias_driving"]["trigger_stop_need_pull_over"].asBool();
  dest.abnormal_watcher.lateral_attention_ratio =
      input_json["abnormal_watcher"]["lateral_attention_ratio"].asDouble();
  dest.traffic_law.stop_signal_preview_distance =
      input_json["traffic_law"]["stop_signal_preview_distance"].asDouble();
  dest.traffic_law.y_junction_stop_interval =
      input_json["traffic_law"]["Y_junction_stop_interval"].asDouble();
  dest.traffic_law.length_of_passing_stop_line_buffer =
      input_json["traffic_law"]["length_of_passing_stop_line_buffer"]
          .asDouble();
  dest.traffic_law.crosswalk_min_speed =
      input_json["traffic_law"]["crosswalk_min_speed"].asDouble();
  dest.traffic_law.crosswalk_lateral_min_dis =
      input_json["traffic_law"]["crosswalk_lateral_min_dis"].asDouble();
  dest.traffic_law.crosswalk_longitudinal_max_dis =
      input_json["traffic_law"]["crosswalk_longitudinal_max_dis"].asDouble();
  dest.traffic_law.passing_speed_threshold =
      input_json["traffic_law"]["passing_speed_threshold"].asDouble();
  dest.traffic_law.passing_speed_ratio =
      input_json["traffic_law"]["passing_speed_ratio"].asDouble();
  dest.traffic_law.passing_time_left_time_threshold =
      input_json["traffic_law"]["passing_time_left_time_threshold"].asDouble();
  dest.traffic_law.passing_time_max_threshold =
      input_json["traffic_law"]["passing_time_max_threshold"].asDouble();
  dest.traffic_law.junction_length_threshold =
      input_json["traffic_law"]["junction_length_threshold"].asDouble();
  dest.traffic_law.junction_export_finished_threshold =
      input_json["traffic_law"]["junction_export_finished_threshold"]
          .asDouble();
  dest.traffic_law.max_deceleration =
      input_json["traffic_law"]["max_deceleration"].asDouble();
  dest.traffic_law.max_over_line_distance =
      input_json["traffic_law"]["max_over_line_distance"].asDouble();
  dest.traffic_law.max_brake_over_line_distance =
      input_json["traffic_law"]["max_brake_over_line_distance"].asDouble();
  dest.traffic_law.color_confirm_time_threshold =
      input_json["traffic_law"]["color_confirm_time_threshold"].asDouble();
  dest.traffic_law.green_light_pass_max_distance =
      input_json["traffic_law"]["green_light_pass_max_distance"].asDouble();
  dest.traffic_law.back_mask_heading =
      input_json["traffic_law"]["back_mask_heading"].asDouble();
  dest.traffic_law.stop_line_distance =
      input_json["traffic_law"]["stop_line_distance"].asDouble();
  dest.traffic_law.stop_line_speed =
      input_json["traffic_law"]["stop_line_speed"].asDouble();
  dest.traffic_law.stop_compensation_distance =
      input_json["traffic_law"]["stop_compensation_distance"].asDouble();
  dest.traffic_light_for_perception.front_attention_dis =
      input_json["traffic_light_for_perception"]["front_attention_dis"]
          .asDouble();
  dest.traffic_light_for_perception.back_attention_dis =
      input_json["traffic_light_for_perception"]["back_attention_dis"]
          .asDouble();
  dest.traffic_light_for_perception.forward_junction_dis =
      input_json["traffic_light_for_perception"]["forward_junction_dis"]
          .asDouble();
  dest.intention.turn_intention_preview_distance =
      input_json["intention"]["turn_intention_preview_distance"].asDouble();
  dest.intention.turn_intention_kappa_threshold =
      input_json["intention"]["turn_intention_kappa_threshold"].asDouble();
  dest.human_interface.block_time_ask_for_takeover =
      input_json["human_interface"]["block_time_ask_for_takeover"].asDouble();
  dest.human_interface.ask_for_take_over_last_time =
      input_json["human_interface"]["ask_for_take_over_last_time"].asDouble();
  dest.human_interface.request_yield_length =
      input_json["human_interface"]["request_yield_length"].asDouble();
  dest.human_interface.slow_speed_threshold =
      input_json["human_interface"]["slow_speed_threshold"].asDouble();
  dest.human_interface.no_move_dist_threshold =
      input_json["human_interface"]["no_move_dist_threshold"].asDouble();
  dest.human_interface.no_obstacle_stop_time_threshold =
      input_json["human_interface"]["no_obstacle_stop_time_threshold"]
          .asDouble();
  dest.human_interface.obstacle_block_stop_time_threshold =
      input_json["human_interface"]["obstacle_block_stop_time_threshold"]
          .asDouble();
  dest.human_interface.reach_station_keep_cnt =
      input_json["human_interface"]["reach_station_keep_cnt"].asInt();
  dest.human_interface.station_stop_speed_threshold =
      input_json["human_interface"]["station_stop_speed_threshold"].asDouble();
  dest.human_interface.reach_station_hard_dist_threashold =
      input_json["human_interface"]["reach_station_hard_dist_threashold"]
          .asDouble();
  dest.human_interface.reach_station_soft_dist_threashold =
      input_json["human_interface"]["reach_station_soft_dist_threashold"]
          .asDouble();
  dest.human_interface.reach_station_hard_stop_time =
      input_json["human_interface"]["reach_station_hard_stop_time"].asDouble();
  dest.human_interface.reach_station_soft_stop_time =
      input_json["human_interface"]["reach_station_soft_stop_time"].asDouble();
  dest.human_interface.no_abnormal_stop_check_dist =
      input_json["human_interface"]["no_abnormal_stop_check_dist"].asDouble();
  dest.speed_limit.enable_start_up_limit =
      input_json["speed_limit"]["enable_start_up_limit"].asBool();
  dest.speed_limit.start_up_limit =
      input_json["speed_limit"]["start_up_limit"].asDouble();
  dest.speed_limit.prepare_borrowing_limit =
      input_json["speed_limit"]["prepare_borrowing_limit"].asDouble();
  dest.speed_limit.lane_borrowing_limit =
      input_json["speed_limit"]["lane_borrowing_limit"].asDouble();
  dest.speed_limit.multi_level_strong_passing =
      input_json["speed_limit"]["multi_level_strong_passing"].asDouble();
  dest.speed_limit.multi_level_passing_through =
      input_json["speed_limit"]["multi_level_passing_through"].asDouble();
  dest.speed_limit.multi_level_passing_by =
      input_json["speed_limit"]["multi_level_passing_by"].asDouble();
  dest.speed_limit.multi_level_normal =
      input_json["speed_limit"]["multi_level_normal"].asDouble();
  dest.speed_limit.multi_level_high_speed =
      input_json["speed_limit"]["multi_level_high_speed"].asDouble();
  dest.speed_limit.close_to_station =
      input_json["speed_limit"]["close_to_station"].asDouble();
  dest.speed_limit.enable_moving_obs_dis_limit =
      input_json["speed_limit"]["enable_moving_obs_dis_limit"].asBool();
  dest.speed_limit.enable_road_bound_limit =
      input_json["speed_limit"]["enable_road_bound_limit"].asBool();
  dest.speed_limit.static_obs_speed_limit_safe_dis =
      input_json["speed_limit"]["static_obs_speed_limit_safe_dis"].asDouble();
  dest.speed_limit.speed_limit_slow_down_accel =
      input_json["speed_limit"]["speed_limit_slow_down_accel"].asDouble();
  dest.speed_limit.kappa_speed_limit_dis =
      input_json["speed_limit"]["kappa_speed_limit_dis"].asDouble();
  dest.speed_limit.max_check_kappa_len =
      input_json["speed_limit"]["max_check_kappa_len"].asDouble();
  dest.speed_limit.dynamic_speedlimit_ignore_dist =
      input_json["speed_limit"]["dynamic_speedlimit_ignore_dist"].asDouble();
  dest.speed_limit.dynamic_speedlimit_consider_length =
      input_json["speed_limit"]["dynamic_speedlimit_consider_length"]
          .asDouble();
  dest.speed_limit.request_yield_ignore_dist =
      input_json["speed_limit"]["request_yield_ignore_dist"].asDouble();
  dest.speed_limit.accessable_path_attention_length =
      input_json["speed_limit"]["accessable_path_attention_length"].asDouble();
  dest.speed_limit.accessable_path_attention_time =
      input_json["speed_limit"]["accessable_path_attention_time"].asDouble();
  dest.speed_reversed_obs.reverse_heading_diff_threshold_rad =
      input_json["speed_reversed_obs"]["reverse_heading_diff_threshold_rad"]
          .asDouble();
  dest.speed_reversed_obs.emergency_deal_time =
      input_json["speed_reversed_obs"]["emergency_deal_time"].asDouble();
  dest.speed_reversed_obs.emergency_deal_min_s_len =
      input_json["speed_reversed_obs"]["emergency_deal_min_s_len"].asDouble();
  dest.speed_reversed_obs.emergency_speed_limit_ratio =
      input_json["speed_reversed_obs"]["emergency_speed_limit_ratio"]
          .asDouble();
  dest.speed_reversed_obs.slow_down_deal_time =
      input_json["speed_reversed_obs"]["slow_down_deal_time"].asDouble();
  dest.speed_reversed_obs.slow_down_deal_min_s_len =
      input_json["speed_reversed_obs"]["slow_down_deal_min_s_len"].asDouble();
  dest.speed_reversed_obs.is_check_before_come_in_single_road =
      input_json["speed_reversed_obs"]["is_check_before_come_in_single_road"]
          .asBool();
  dest.speed_reversed_obs.single_road_stop_wait_buffer =
      input_json["speed_reversed_obs"]["single_road_stop_wait_buffer"]
          .asDouble();
  dest.speed_reversed_obs.all_delay_time =
      input_json["speed_reversed_obs"]["all_delay_time"].asDouble();
  dest.speed_reversed_obs.lateral_safe_dis =
      input_json["speed_reversed_obs"]["lateral_safe_dis"].asDouble();
  dest.speed_reversed_obs.lateral_cutin_delta =
      input_json["speed_reversed_obs"]["lateral_cutin_delta"].asDouble();
  dest.speed_reversed_obs.stop_cutin_filter_num =
      input_json["speed_reversed_obs"]["stop_cutin_filter_num"].asInt();
  dest.speed_reversed_obs.linear_ratio_v_and_l_dis =
      input_json["speed_reversed_obs"]["linear_ratio_v_and_l_dis"].asInt();
  dest.speed_reversed_obs.linear_offset_v_and_l_dis =
      input_json["speed_reversed_obs"]["linear_offset_v_and_l_dis"].asDouble();
  dest.speed_reversed_obs.limit_max_deceleration =
      input_json["speed_reversed_obs"]["limit_max_deceleration"].asDouble();
  dest.speed_reversed_obs.lat_check_time =
      input_json["speed_reversed_obs"]["lat_check_time"].asDouble();
  dest.speed_reversed_obs.lat_check_dis =
      input_json["speed_reversed_obs"]["lat_check_dis"].asDouble();
  dest.speed_worm_or_speed_up.worm_check_area_width_epsilon =
      input_json["speed_worm_or_speed_up"]["worm_check_area_width_epsilon"]
          .asDouble();
  dest.speed_worm_or_speed_up.worm_check_area_length =
      input_json["speed_worm_or_speed_up"]["worm_check_area_length"].asDouble();
  dest.speed_worm_or_speed_up.worm_adc_speed_threshold =
      input_json["speed_worm_or_speed_up"]["worm_adc_speed_threshold"]
          .asDouble();
  dest.speed_worm_or_speed_up.worm_adc_time_cycle_threshold =
      input_json["speed_worm_or_speed_up"]["worm_adc_time_cycle_threshold"]
          .asInt();
  dest.speed_worm_or_speed_up.worm_min_safe_distance =
      input_json["speed_worm_or_speed_up"]["worm_min_safe_distance"].asDouble();
  dest.speed_worm_or_speed_up.worm_obs_max_speed_threshold =
      input_json["speed_worm_or_speed_up"]["worm_obs_max_speed_threshold"]
          .asDouble();
  dest.speed_worm_or_speed_up.speed_up_check_area_min_length =
      input_json["speed_worm_or_speed_up"]["speed_up_check_area_min_length"]
          .asDouble();
  dest.speed_worm_or_speed_up.speed_up_safe_distance =
      input_json["speed_worm_or_speed_up"]["speed_up_safe_distance"].asDouble();
  dest.speed_worm_or_speed_up.speed_up_consider_obs =
      input_json["speed_worm_or_speed_up"]["speed_up_consider_obs"].asBool();
  dest.speed_worm_or_speed_up.speed_up_safe_speed_threshold =
      input_json["speed_worm_or_speed_up"]["speed_up_safe_speed_threshold"]
          .asDouble();
  dest.speed_worm_or_speed_up.speed_up_max_deceleration_threshold =
      input_json["speed_worm_or_speed_up"]
                ["speed_up_max_deceleration_threshold"]
                    .asDouble();
  dest.speed_smooth_slow_down.static_obs_slow_down_buffer =
      input_json["speed_smooth_slow_down"]["static_obs_slow_down_buffer"]
          .asDouble();
  dest.speed_smooth_slow_down.virtual_obs_slow_down_buffer =
      input_json["speed_smooth_slow_down"]["virtual_obs_slow_down_buffer"]
          .asDouble();
  dest.speed_smooth_slow_down.slow_down_target_speed =
      input_json["speed_smooth_slow_down"]["slow_down_target_speed"].asDouble();
  dest.speed_smooth_slow_down.all_delay_time =
      input_json["speed_smooth_slow_down"]["all_delay_time"].asDouble();
  dest.speed_smooth_slow_down.limit_max_deceleration =
      input_json["speed_smooth_slow_down"]["limit_max_deceleration"].asDouble();
  dest.speed_static_obs_jump.adc_enlarge_buffer =
      input_json["speed_static_obs_jump"]["adc_enlarge_buffer"].asDouble();
  dest.speed_static_obs_jump.static_obs_slow_down_buffer =
      input_json["speed_static_obs_jump"]["static_obs_slow_down_buffer"]
          .asDouble();
  dest.speed_static_obs_jump.lat_dis_speed_ratio =
      input_json["speed_static_obs_jump"]["lat_dis_speed_ratio"].asDouble();
  dest.visual_ref_line.force_enter_visual_ref_line =
      input_json["visual_ref_line"]["force_enter_visual_ref_line"].asBool();
  dest.visual_ref_line.enable_visual_ref_line =
      input_json["visual_ref_line"]["enable_visual_ref_line"].asBool();
  dest.back_out.enable_back_out =
      input_json["back_out"]["enable_back_out"].asBool();
  dest.back_out.enable_motor_back_out =
      input_json["back_out"]["enable_motor_back_out"].asBool();
  dest.back_out.end_length = input_json["back_out"]["end_length"].asDouble();
  dest.back_out.tar_s_bias = input_json["back_out"]["tar_s_bias"].asDouble();
  dest.back_out.detour_choose =
      input_json["back_out"]["detour_choose"].asBool();
  dest.back_out.max_limit_speed =
      input_json["back_out"]["max_limit_speed"].asDouble();
  dest.back_out.lat_err = input_json["back_out"]["lat_err"].asDouble();
  dest.back_out.station_err = input_json["back_out"]["station_err"].asDouble();
  dest.back_out.heading_err = input_json["back_out"]["heading_err"].asDouble();
  dest.back_out.camera_id = input_json["back_out"]["camera_id"].asString();
  dest.back_out.stop_cnt_threshold =
      input_json["back_out"]["stop_cnt_threshold"].asInt();
  dest.back_out.preview_distance =
      input_json["back_out"]["preview_distance"].asInt();
  dest.back_out.lat_safe_buffer =
      input_json["back_out"]["lat_safe_buffer"].asDouble();
  dest.back_out.lon_safe_buffer =
      input_json["back_out"]["lon_safe_buffer"].asDouble();
  dest.event_report.enable_preprocess_fail =
      input_json["event_report"]["enable_preprocess_fail"].asBool();
  dest.event_report.preprocess_fail_mintime =
      input_json["event_report"]["preprocess_fail_mintime"].asDouble();
  dest.event_report.enable_plan_fail =
      input_json["event_report"]["enable_plan_fail"].asBool();
  dest.event_report.plan_fail_mintime =
      input_json["event_report"]["plan_fail_mintime"].asDouble();
  dest.event_report.enable_unknown_traffic_light =
      input_json["event_report"]["enable_unknown_traffic_light"].asBool();
  dest.event_report.unknown_traffic_light_mintime =
      input_json["event_report"]["unknown_traffic_light_mintime"].asDouble();
  dest.event_report.enable_stop_over_line =
      input_json["event_report"]["enable_stop_over_line"].asBool();
  dest.event_report.stop_over_line_mintime =
      input_json["event_report"]["stop_over_line_mintime"].asDouble();
  dest.event_report.enable_pullover_failed =
      input_json["event_report"]["enable_pullover_failed"].asBool();
  dest.event_report.pullover_failed_mintime =
      input_json["event_report"]["pullover_failed_mintime"].asDouble();
  dest.event_report.enable_meet_barrier_gate =
      input_json["event_report"]["enable_meet_barrier_gate"].asBool();
  dest.event_report.meet_barrier_gate_mintime =
      input_json["event_report"]["meet_barrier_gate_mintime"].asDouble();
  dest.event_report.enable_parkin_finish =
      input_json["event_report"]["enable_parkin_finish"].asBool();
  dest.event_report.parkin_finish_mintime =
      input_json["event_report"]["parkin_finish_mintime"].asDouble();
  dest.event_report.enable_parkout_finish =
      input_json["event_report"]["enable_parkout_finish"].asBool();
  dest.event_report.parkout_finish_mintime =
      input_json["event_report"]["parkout_finish_mintime"].asDouble();
  dest.event_report.enable_park_failed =
      input_json["event_report"]["enable_park_failed"].asBool();
  dest.event_report.park_failed_mintime =
      input_json["event_report"]["park_failed_mintime"].asDouble();
  dest.event_report.enable_abnormal_stop =
      input_json["event_report"]["enable_abnormal_stop"].asBool();
  dest.event_report.abnormal_stop_mintime =
      input_json["event_report"]["abnormal_stop_mintime"].asDouble();
  dest.event_report.enable_obstacle_block_timeout =
      input_json["event_report"]["enable_obstacle_block_timeout"].asBool();
  dest.event_report.obstacle_block_timeout_mintime =
      input_json["event_report"]["obstacle_block_timeout_mintime"].asDouble();
  dest.event_report.enable_detour_failed =
      input_json["event_report"]["enable_detour_failed"].asBool();
  dest.event_report.detour_failed_mintime =
      input_json["event_report"]["detour_failed_mintime"].asDouble();
  dest.event_report.enable_lane_change_failed =
      input_json["event_report"]["enable_lane_change_failed"].asBool();
  dest.event_report.lane_change_failed_mintime =
      input_json["event_report"]["lane_change_failed_mintime"].asDouble();
  dest.event_report.enable_mixed_lane_change_failed =
      input_json["event_report"]["enable_mixed_lane_change_failed"].asBool();
  dest.event_report.mixed_lane_change_failed_mintime =
      input_json["event_report"]["mixed_lane_change_failed_mintime"].asDouble();
  dest.localization.odom_keep_dis =
      input_json["localization"]["odom_keep_dis"].asDouble();
  dest.localization.hdmap_utm_delay_threshold =
      input_json["localization"]["hdmap_utm_delay_threshold"].asDouble();
  dest.localization.hdmap_odom_delay_threshold =
      input_json["localization"]["hdmap_odom_delay_threshold"].asDouble();
  dest.localization.odom_sensor_bad_deceleration =
      input_json["localization"]["odom_sensor_bad_deceleration"].asDouble();
  dest.localization.odom_sensor_bad_system_delay_time =
      input_json["localization"]["odom_sensor_bad_system_delay_time"]
          .asDouble();
  dest.prediction.enable_prediction =
      input_json["prediction"]["enable_prediction"].asBool();
  dest.prediction.reverse_trust_time_delta =
      input_json["prediction"]["reverse_trust_time_delta"].asDouble();
  dest.prediction.trust_time_delta =
      input_json["prediction"]["trust_time_delta"].asDouble();
  dest.prediction.enable_meeting_turn_right =
      input_json["prediction"]["enable_meeting_turn_right"].asBool();
  dest.barrier_gate_scenario.enable_barrier_gate =
      input_json["barrier_gate_scenario"]["enable_barrier_gate"].asBool();
  dest.barrier_gate_scenario.move_stage_speed_limit =
      input_json["barrier_gate_scenario"]["move_stage_speed_limit"].asDouble();
  dest.barrier_gate_scenario.virtual_obs_buffer_dis =
      input_json["barrier_gate_scenario"]["virtual_obs_buffer_dis"].asDouble();
  dest.barrier_gate_scenario.flag_complete_auto_drive =
      input_json["barrier_gate_scenario"]["flag_complete_auto_drive"].asBool();
  dest.barrier_gate_scenario.flag_test =
      input_json["barrier_gate_scenario"]["flag_test"].asBool();
  dest.motorway_lane_change_scenario.preview_front_distance =
      input_json["motorway_lane_change_scenario"]["preview_front_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.preview_back_distance =
      input_json["motorway_lane_change_scenario"]["preview_back_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.near_front_distance =
      input_json["motorway_lane_change_scenario"]["near_front_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.near_back_distance =
      input_json["motorway_lane_change_scenario"]["near_back_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.preview_time =
      input_json["motorway_lane_change_scenario"]["preview_time"].asDouble();
  dest.motorway_lane_change_scenario.traffic_light_preview_distance =
      input_json["motorway_lane_change_scenario"]
                ["traffic_light_preview_distance"]
                    .asDouble();
  dest.motorway_lane_change_scenario.road_bound_preview_distance =
      input_json["motorway_lane_change_scenario"]["road_bound_preview_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.divider_restrict_preview_distance =
      input_json["motorway_lane_change_scenario"]
                ["divider_restrict_preview_distance"]
                    .asDouble();
  dest.motorway_lane_change_scenario.lane_turn_preview_distance =
      input_json["motorway_lane_change_scenario"]["lane_turn_preview_distance"]
          .asDouble();
  dest.motorway_lane_change_scenario.motorway_lane_change_request =
      input_json["motorway_lane_change_scenario"]
                ["motorway_lane_change_request"]
                    .asInt();
  dest.motorway_lane_change_scenario.min_stop_dist_before_junction =
      input_json["motorway_lane_change_scenario"]
                ["min_stop_dist_before_junction"]
                    .asDouble();
  dest.motorway_lane_change_scenario.min_distance_to_lane_change_end =
      input_json["motorway_lane_change_scenario"]
                ["min_distance_to_lane_change_end"]
                    .asDouble();
  dest.motorway_lane_change_scenario.adc_width_ratio =
      input_json["motorway_lane_change_scenario"]["adc_width_ratio"].asDouble();
  dest.motorway_lane_change_scenario.buff_of_maxspeed =
      input_json["motorway_lane_change_scenario"]["buff_of_maxspeed"]
          .asDouble();
  dest.motorway_lane_change_scenario.buff_of_minspeed =
      input_json["motorway_lane_change_scenario"]["buff_of_minspeed"]
          .asDouble();
  dest.motorway_lane_change_scenario.maxspeed =
      input_json["motorway_lane_change_scenario"]["maxspeed"].asDouble();
  dest.motorway_lane_change_scenario.minspeed =
      input_json["motorway_lane_change_scenario"]["minspeed"].asDouble();
  dest.motorway_lane_change_scenario.max_deceleration =
      input_json["motorway_lane_change_scenario"]["max_deceleration"]
          .asDouble();
  dest.reverse_lane_detour.enable_reverse_lane_detour_motorway =
      input_json["reverse_lane_detour"]["enable_reverse_lane_detour_motorway"]
          .asBool();
  dest.reverse_lane_detour.enable_reverse_lane_detour_non_motorway =
      input_json["reverse_lane_detour"]
                ["enable_reverse_lane_detour_non_motorway"]
                    .asBool();
  dest.reverse_lane_detour.speed_limit_motorway.leftmost_lane_complete_limit =
      input_json["reverse_lane_detour"]["speed_limit_motorway"]
                ["leftmost_lane_complete_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_motorway.divider_crossing_limit =
      input_json["reverse_lane_detour"]["speed_limit_motorway"]
                ["divider_crossing_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_motorway.reverse_lane_complete_limit =
      input_json["reverse_lane_detour"]["speed_limit_motorway"]
                ["reverse_lane_complete_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_motorway.over_reverse_lane_limit =
      input_json["reverse_lane_detour"]["speed_limit_motorway"]
                ["over_reverse_lane_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_motorway.not_define_limit =
      input_json["reverse_lane_detour"]["speed_limit_motorway"]
                ["not_define_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_non_motorway
      .leftmost_lane_complete_limit =
      input_json["reverse_lane_detour"]["speed_limit_non_motorway"]
                ["leftmost_lane_complete_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_non_motorway.divider_crossing_limit =
      input_json["reverse_lane_detour"]["speed_limit_non_motorway"]
                ["divider_crossing_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_non_motorway
      .reverse_lane_complete_limit =
      input_json["reverse_lane_detour"]["speed_limit_non_motorway"]
                ["reverse_lane_complete_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_non_motorway.over_reverse_lane_limit =
      input_json["reverse_lane_detour"]["speed_limit_non_motorway"]
                ["over_reverse_lane_limit"]
                    .asDouble();
  dest.reverse_lane_detour.speed_limit_non_motorway.not_define_limit =
      input_json["reverse_lane_detour"]["speed_limit_non_motorway"]
                ["not_define_limit"]
                    .asDouble();
  dest.scenario_common.is_front_static_obs_clear_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_front_static_obs_clear_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_front_static_obs_clear_conf.horizon =
      input_json["scenario_common"]["is_front_static_obs_clear_conf"]["horizon"]
          .asInt();
  dest.scenario_common.is_front_static_obs_clear_conf.exp_param =
      input_json["scenario_common"]["is_front_static_obs_clear_conf"]
                ["exp_param"]
                    .asDouble();
  dest.scenario_common.is_dynamic_obs_clear_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_dynamic_obs_clear_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_dynamic_obs_clear_conf.horizon =
      input_json["scenario_common"]["is_dynamic_obs_clear_conf"]["horizon"]
          .asInt();
  dest.scenario_common.is_dynamic_obs_clear_conf.exp_param =
      input_json["scenario_common"]["is_dynamic_obs_clear_conf"]["exp_param"]
          .asDouble();
  dest.scenario_common.is_front_has_traffic_light_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_front_has_traffic_light_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_front_has_traffic_light_conf.horizon =
      input_json["scenario_common"]["is_front_has_traffic_light_conf"]
                ["horizon"]
                    .asInt();
  dest.scenario_common.is_front_has_traffic_light_conf.exp_param =
      input_json["scenario_common"]["is_front_has_traffic_light_conf"]
                ["exp_param"]
                    .asDouble();
  dest.scenario_common.is_front_has_cross_road_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_front_has_cross_road_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_front_has_cross_road_conf.horizon =
      input_json["scenario_common"]["is_front_has_cross_road_conf"]["horizon"]
          .asInt();
  dest.scenario_common.is_front_has_cross_road_conf.exp_param =
      input_json["scenario_common"]["is_front_has_cross_road_conf"]["exp_param"]
          .asDouble();
  dest.scenario_common.is_front_has_road_boundary_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_front_has_road_boundary_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_front_has_road_boundary_conf.horizon =
      input_json["scenario_common"]["is_front_has_road_boundary_conf"]
                ["horizon"]
                    .asInt();
  dest.scenario_common.is_front_has_road_boundary_conf.exp_param =
      input_json["scenario_common"]["is_front_has_road_boundary_conf"]
                ["exp_param"]
                    .asDouble();
  dest.scenario_common.is_left_front_has_road_boundary_conf
      .is_use_multi_frames =
      input_json["scenario_common"]["is_left_front_has_road_boundary_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_left_front_has_road_boundary_conf.horizon =
      input_json["scenario_common"]["is_left_front_has_road_boundary_conf"]
                ["horizon"]
                    .asInt();
  dest.scenario_common.is_left_front_has_road_boundary_conf.exp_param =
      input_json["scenario_common"]["is_left_front_has_road_boundary_conf"]
                ["exp_param"]
                    .asDouble();
  dest.scenario_common.is_right_front_has_road_boundary_conf
      .is_use_multi_frames =
      input_json["scenario_common"]["is_right_front_has_road_boundary_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_right_front_has_road_boundary_conf.horizon =
      input_json["scenario_common"]["is_right_front_has_road_boundary_conf"]
                ["horizon"]
                    .asInt();
  dest.scenario_common.is_right_front_has_road_boundary_conf.exp_param =
      input_json["scenario_common"]["is_right_front_has_road_boundary_conf"]
                ["exp_param"]
                    .asDouble();
  dest.scenario_common.is_in_right_first_line_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_in_right_first_line_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_in_right_first_line_conf.horizon =
      input_json["scenario_common"]["is_in_right_first_line_conf"]["horizon"]
          .asInt();
  dest.scenario_common.is_in_right_first_line_conf.exp_param =
      input_json["scenario_common"]["is_in_right_first_line_conf"]["exp_param"]
          .asDouble();
  dest.scenario_common.is_front_has_lane_turn_conf.is_use_multi_frames =
      input_json["scenario_common"]["is_front_has_lane_turn_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_front_has_lane_turn_conf.horizon =
      input_json["scenario_common"]["is_front_has_lane_turn_conf"]["horizon"]
          .asInt();
  dest.scenario_common.is_front_has_lane_turn_conf.exp_param =
      input_json["scenario_common"]["is_front_has_lane_turn_conf"]["exp_param"]
          .asDouble();
  dest.scenario_common.is_allowed_detour_in_reverse_lane_conf
      .is_use_multi_frames =
      input_json["scenario_common"]["is_allowed_detour_in_reverse_lane_conf"]
                ["is_use_multi_frames"]
                    .asBool();
  dest.scenario_common.is_allowed_detour_in_reverse_lane_conf.horizon =
      input_json["scenario_common"]["is_allowed_detour_in_reverse_lane_conf"]
                ["horizon"]
                    .asInt();
  dest.scenario_common.is_allowed_detour_in_reverse_lane_conf.exp_param =
      input_json["scenario_common"]["is_allowed_detour_in_reverse_lane_conf"]
                ["exp_param"]
                    .asDouble();
}

}  // namespace config
}  // namespace planning
}  // namespace neodrive
