/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#include "config/auto_planning_research_config.h"

namespace neodrive {
namespace planning {
namespace config {

void InitAutoPlanningResearchConfig(const Json::Value &input_json,
                                    AutoPlanningResearchConfig &dest) {
  dest.only_for_backup_path_planner =
      input_json["only_for_backup_path_planner"].asBool();
  dest.only_for_backup_speed_planner =
      input_json["only_for_backup_speed_planner"].asBool();
  dest.camera_lane_config.junction_pre_dis =
      input_json["camera_lane_config"]["junction_pre_dis"].asDouble();
  dest.camera_lane_config.bev_2d_use_length =
      input_json["camera_lane_config"]["bev_2d_use_length"].asDouble();
  dest.camera_lane_config.bev_2d_average_value_threshold =
      input_json["camera_lane_config"]["bev_2d_average_value_threshold"]
          .asDouble();
  dest.camera_lane_config.check_heading_front_use_length =
      input_json["camera_lane_config"]["check_heading_front_use_length"]
          .asDouble();
  dest.camera_lane_config.check_heading_back_use_length =
      input_json["camera_lane_config"]["check_heading_back_use_length"]
          .asDouble();
  dest.camera_lane_config.check_heading_delta_degree =
      input_json["camera_lane_config"]["check_heading_delta_degree"].asDouble();
  dest.reference_line_config.curise_generator_config.front_extend_length =
      input_json["reference_line_config"]["curise_generator_config"]
                ["front_extend_length"]
                    .asDouble();
  dest.reference_line_config.curise_generator_config.back_extend_length =
      input_json["reference_line_config"]["curise_generator_config"]
                ["back_extend_length"]
                    .asDouble();
  dest.reference_line_config.curise_generator_config.ref_stitch_length =
      input_json["reference_line_config"]["curise_generator_config"]
                ["ref_stitch_length"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config.smoother =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["smoother"]
                    .asString();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .max_deviation = input_json["reference_line_config"]["smoother_config"]
                                 ["fempos_smoother_config"]["max_deviation"]
                                     .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .piecewise_length =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["piecewise_length"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .max_iteration = input_json["reference_line_config"]["smoother_config"]
                                 ["fempos_smoother_config"]["max_iteration"]
                                     .asInt();
  dest.reference_line_config.smoother_config.fempos_smoother_config.opt_tol =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["opt_tol"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .opt_acceptable_tol =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["opt_acceptable_tol"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .opt_acceptable_iteration =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["opt_acceptable_iteration"]
                    .asInt();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .weight_curve_length =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["weight_curve_length"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .weight_kappa = input_json["reference_line_config"]["smoother_config"]
                                ["fempos_smoother_config"]["weight_kappa"]
                                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .weight_dkappa = input_json["reference_line_config"]["smoother_config"]
                                 ["fempos_smoother_config"]["weight_dkappa"]
                                     .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .longitudinal_boundary_bound =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["longitudinal_boundary_bound"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .lateral_boundary_bound =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["lateral_boundary_bound"]
                    .asDouble();
  dest.reference_line_config.smoother_config.fempos_smoother_config
      .reference_line_point_interval =
      input_json["reference_line_config"]["smoother_config"]
                ["fempos_smoother_config"]["reference_line_point_interval"]
                    .asDouble();
  dest.reference_line_smooth_config.smoother =
      input_json["reference_line_smooth_config"]["smoother"].asString();
  dest.reference_line_smooth_config.max_deviation =
      input_json["reference_line_smooth_config"]["max_deviation"].asDouble();
  dest.reference_line_smooth_config.piecewise_length =
      input_json["reference_line_smooth_config"]["piecewise_length"].asDouble();
  dest.reference_line_smooth_config.max_iteration =
      input_json["reference_line_smooth_config"]["max_iteration"].asInt();
  dest.reference_line_smooth_config.opt_tol =
      input_json["reference_line_smooth_config"]["opt_tol"].asDouble();
  dest.reference_line_smooth_config.opt_acceptable_tol =
      input_json["reference_line_smooth_config"]["opt_acceptable_tol"]
          .asDouble();
  dest.reference_line_smooth_config.opt_acceptable_iteration =
      input_json["reference_line_smooth_config"]["opt_acceptable_iteration"]
          .asInt();
  dest.reference_line_smooth_config.weight_curve_length =
      input_json["reference_line_smooth_config"]["weight_curve_length"]
          .asDouble();
  dest.reference_line_smooth_config.weight_kappa =
      input_json["reference_line_smooth_config"]["weight_kappa"].asDouble();
  dest.reference_line_smooth_config.weight_dkappa =
      input_json["reference_line_smooth_config"]["weight_dkappa"].asDouble();
  dest.reference_line_smooth_config.longitudinal_boundary_bound =
      input_json["reference_line_smooth_config"]["longitudinal_boundary_bound"]
          .asDouble();
  dest.reference_line_smooth_config.lateral_boundary_bound =
      input_json["reference_line_smooth_config"]["lateral_boundary_bound"]
          .asDouble();
  dest.reference_line_smooth_config.indoor.enable_adjust_bound =
      input_json["reference_line_smooth_config"]["indoor"]
                ["enable_adjust_bound"]
                    .asBool();
  dest.reference_line_smooth_config.indoor.longitudinal_boundary_bound =
      input_json["reference_line_smooth_config"]["indoor"]
                ["longitudinal_boundary_bound"]
                    .asDouble();
  dest.reference_line_smooth_config.indoor.lateral_boundary_bound =
      input_json["reference_line_smooth_config"]["indoor"]
                ["lateral_boundary_bound"]
                    .asDouble();
  dest.reference_line_smooth_config.motorway.enable_adjust_bound =
      input_json["reference_line_smooth_config"]["motorway"]
                ["enable_adjust_bound"]
                    .asBool();
  dest.reference_line_smooth_config.motorway.longitudinal_boundary_bound =
      input_json["reference_line_smooth_config"]["motorway"]
                ["longitudinal_boundary_bound"]
                    .asDouble();
  dest.reference_line_smooth_config.motorway.lateral_boundary_bound =
      input_json["reference_line_smooth_config"]["motorway"]
                ["lateral_boundary_bound"]
                    .asDouble();
  dest.reference_line_smooth_config.reference_line_point_interval =
      input_json["reference_line_smooth_config"]
                ["reference_line_point_interval"]
                    .asDouble();
  dest.speed_worm_follow.planning_step_time_ =
      input_json["speed_worm_follow"]["planning_step_time_"].asDouble();
  dest.speed_worm_follow.acc_rate_ =
      input_json["speed_worm_follow"]["acc_rate_"].asDouble();
  dest.speed_worm_follow.ego_headway_ =
      input_json["speed_worm_follow"]["ego_headway_"].asDouble();
  dest.speed_worm_follow.default_space_ =
      input_json["speed_worm_follow"]["default_space_"].asInt();
  dest.speed_worm_follow.worm_obs_max_speed_threshold =
      input_json["speed_worm_follow"]["worm_obs_max_speed_threshold"]
          .asDouble();
  dest.speed_worm_follow.worm_mode_check_area_length =
      input_json["speed_worm_follow"]["worm_mode_check_area_length"].asDouble();
  dest.speed_worm_follow.worm_mode_check_area_width_expend =
      input_json["speed_worm_follow"]["worm_mode_check_area_width_expend"]
          .asDouble();
  dest.speed_worm_follow.desire_max_a_ =
      input_json["speed_worm_follow"]["desire_max_a_"].asDouble();
  dest.speed_worm_follow.worm_time_cycle_threshold =
      input_json["speed_worm_follow"]["worm_time_cycle_threshold"].asInt();
  dest.speed_worm_follow.min_stop_buffer =
      input_json["speed_worm_follow"]["min_stop_buffer"].asInt();
  dest.speed_worm_follow.night_market_lat_buffer =
      input_json["speed_worm_follow"]["night_market_lat_buffer"].asDouble();
  dest.speed_worm_follow.worm_trajectory_points_num =
      input_json["speed_worm_follow"]["worm_trajectory_points_num"].asInt();
  dest.speed_worm_follow.default_space_for_motoway =
      input_json["speed_worm_follow"]["default_space_for_motoway"].asDouble();
  dest.speed_worm_follow.worm_trigger_speed =
      input_json["speed_worm_follow"]["worm_trigger_speed"].asDouble();
  dest.speed_lane_change.planning_step_time_ =
      input_json["speed_lane_change"]["planning_step_time_"].asDouble();
  dest.speed_lane_change.future_see_forward_length =
      input_json["speed_lane_change"]["future_see_forward_length"].asDouble();
  dest.speed_lane_change.future_see_backward_length =
      input_json["speed_lane_change"]["future_see_backward_length"].asDouble();
  dest.speed_lane_change.future_see_left_width =
      input_json["speed_lane_change"]["future_see_left_width"].asDouble();
  dest.speed_lane_change.future_see_right_width =
      input_json["speed_lane_change"]["future_see_right_width"].asDouble();
  dest.speed_lane_change.min_obs_speed =
      input_json["speed_lane_change"]["min_obs_speed"].asDouble();
  dest.speed_lane_change.lane_change_use_time =
      input_json["speed_lane_change"]["lane_change_use_time"].asDouble();
  dest.speed_lane_change.lane_change_sample_t_s =
      input_json["speed_lane_change"]["lane_change_sample_t_s"].asDouble();
  dest.speed_lane_change.lane_change_sample_t_e =
      input_json["speed_lane_change"]["lane_change_sample_t_e"].asDouble();
  dest.speed_lane_change.iter_size_for_nonlinear_solve =
      input_json["speed_lane_change"]["iter_size_for_nonlinear_solve"].asInt();
  dest.speed_lane_change.iter_max_threshold =
      input_json["speed_lane_change"]["iter_max_threshold"].asDouble();
  dest.speed_lane_change.lane_change_ld_buffer =
      input_json["speed_lane_change"]["lane_change_ld_buffer"].asDouble();
  dest.speed_lane_change.lane_change_fd_buffer =
      input_json["speed_lane_change"]["lane_change_fd_buffer"].asDouble();
  dest.speed_lane_change.ego_ld_thw =
      input_json["speed_lane_change"]["ego_ld_thw"].asDouble();
  dest.speed_lane_change.ego_fd_thw_ttw =
      input_json["speed_lane_change"]["ego_fd_thw_ttw"].asDouble();
  dest.speed_lane_change.ld_ego_ttw =
      input_json["speed_lane_change"]["ld_ego_ttw"].asDouble();
  dest.speed_lane_change.ld_t_inf =
      input_json["speed_lane_change"]["ld_t_inf"].asDouble();
  dest.speed_lane_change.fd_t_inf =
      input_json["speed_lane_change"]["fd_t_inf"].asDouble();
  dest.speed_lane_change.ignore_ld_dis =
      input_json["speed_lane_change"]["ignore_ld_dis"].asDouble();
  dest.speed_lane_change.lane_change_t_adj =
      input_json["speed_lane_change"]["lane_change_t_adj"].asDouble();
  dest.speed_lane_change.dis_to_end_triger =
      input_json["speed_lane_change"]["dis_to_end_triger"].asDouble();
  dest.speed_lane_change.dis_to_set_obs =
      input_json["speed_lane_change"]["dis_to_set_obs"].asDouble();
  dest.speed_iter_deduction.step_time =
      input_json["speed_iter_deduction"]["step_time"].asDouble();
  dest.speed_iter_deduction.back_extend_time =
      input_json["speed_iter_deduction"]["back_extend_time"].asDouble();
  dest.speed_iter_deduction.pid_desire_max_a =
      input_json["speed_iter_deduction"]["pid_desire_max_a"].asDouble();
  dest.speed_iter_deduction.pid_v_set =
      input_json["speed_iter_deduction"]["pid_v_set"].asDouble();
  dest.speed_iter_deduction.pid_p =
      input_json["speed_iter_deduction"]["pid_p"].asDouble();
  dest.speed_iter_deduction.idm_p =
      input_json["speed_iter_deduction"]["idm_p"].asDouble();
  dest.speed_iter_deduction.headway =
      input_json["speed_iter_deduction"]["headway"].asDouble();
  dest.speed_iter_deduction.default_space =
      input_json["speed_iter_deduction"]["default_space"].asDouble();
  dest.speed_iter_deduction.default_space_for_virtual =
      input_json["speed_iter_deduction"]["default_space_for_virtual"]
          .asDouble();
  dest.speed_iter_deduction.default_space_for_stop =
      input_json["speed_iter_deduction"]["default_space_for_stop"].asDouble();
  dest.speed_iter_deduction.desire_max_a =
      input_json["speed_iter_deduction"]["desire_max_a"].asDouble();
  dest.speed_iter_deduction.desire_max_b =
      input_json["speed_iter_deduction"]["desire_max_b"].asDouble();
  dest.speed_iter_deduction.collision_buffer =
      input_json["speed_iter_deduction"]["collision_buffer"].asDouble();
  dest.speed_iter_deduction.ego_acc_triger =
      input_json["speed_iter_deduction"]["ego_acc_triger"].asBool();
  dest.speed_iter_deduction.virtual_bound_t =
      input_json["speed_iter_deduction"]["virtual_bound_t"].asDouble();
  dest.speed_iter_deduction.collision_buffer_l =
      input_json["speed_iter_deduction"]["collision_buffer_l"].asDouble();
  dest.speed_iter_deduction.collision_buffer_u =
      input_json["speed_iter_deduction"]["collision_buffer_u"].asDouble();
  dest.speed_iter_deduction.predestrian_protection_buffer =
      input_json["speed_iter_deduction"]["predestrian_protection_buffer"]
          .asDouble();
  dest.speed_iter_deduction.collision_convergence_thw =
      input_json["speed_iter_deduction"]["collision_convergence_thw"]
          .asDouble();
  dest.speed_iter_deduction.collision_convergence_ttw =
      input_json["speed_iter_deduction"]["collision_convergence_ttw"]
          .asDouble();
  dest.speed_iter_deduction.collision_convergence_thw_end =
      input_json["speed_iter_deduction"]["collision_convergence_thw_end"]
          .asDouble();
  dest.speed_iter_deduction.max_backtrack_time =
      input_json["speed_iter_deduction"]["max_backtrack_time"].asInt();
  dest.speed_iter_deduction.stop_a =
      input_json["speed_iter_deduction"]["stop_a"].asDouble();
  dest.speed_iter_deduction.stop_v =
      input_json["speed_iter_deduction"]["stop_v"].asDouble();
  dest.speed_cilqr.step_time =
      input_json["speed_cilqr"]["step_time"].asDouble();
  dest.speed_cilqr.max_iters = input_json["speed_cilqr"]["max_iters"].asInt();
  dest.speed_cilqr.max_jerk_limit =
      input_json["speed_cilqr"]["max_jerk_limit"].asDouble();
  dest.speed_cilqr.min_jerk_limit =
      input_json["speed_cilqr"]["min_jerk_limit"].asDouble();
  dest.speed_cilqr.min_s_limit =
      input_json["speed_cilqr"]["min_s_limit"].asDouble();
  dest.speed_cilqr.min_v_limit =
      input_json["speed_cilqr"]["min_v_limit"].asDouble();
  dest.speed_cilqr.max_v_limit =
      input_json["speed_cilqr"]["max_v_limit"].asDouble();
  dest.speed_cilqr.min_a_limit =
      input_json["speed_cilqr"]["min_a_limit"].asDouble();
  dest.speed_cilqr.max_a_limit =
      input_json["speed_cilqr"]["max_a_limit"].asDouble();
  dest.speed_cilqr.q1_jerk = input_json["speed_cilqr"]["q1_jerk"].asDouble();
  dest.speed_cilqr.q2_jerk = input_json["speed_cilqr"]["q2_jerk"].asDouble();
  dest.speed_cilqr.q1_s = input_json["speed_cilqr"]["q1_s"].asDouble();
  dest.speed_cilqr.q2_s = input_json["speed_cilqr"]["q2_s"].asDouble();
  dest.speed_cilqr.q1_s_obs = input_json["speed_cilqr"]["q1_s_obs"].asDouble();
  dest.speed_cilqr.q2_s_obs = input_json["speed_cilqr"]["q2_s_obs"].asDouble();
  dest.speed_cilqr.q1_v = input_json["speed_cilqr"]["q1_v"].asDouble();
  dest.speed_cilqr.q2_v = input_json["speed_cilqr"]["q2_v"].asDouble();
  dest.speed_cilqr.q1_a = input_json["speed_cilqr"]["q1_a"].asDouble();
  dest.speed_cilqr.q2_a = input_json["speed_cilqr"]["q2_a"].asDouble();
  dest.speed_cilqr.control_cost =
      input_json["speed_cilqr"]["control_cost"].asDouble();
  dest.speed_cilqr.state_s_cost =
      input_json["speed_cilqr"]["state_s_cost"].asDouble();
  dest.speed_cilqr.state_v_cost =
      input_json["speed_cilqr"]["state_v_cost"].asDouble();
  dest.speed_cilqr.state_a_cost =
      input_json["speed_cilqr"]["state_a_cost"].asDouble();
  dest.speed_reversed_repulsive_field_caution.planning_step_time_ =
      input_json["speed_reversed_repulsive_field_caution"]
                ["planning_step_time_"]
                    .asDouble();
  dest.speed_reversed_repulsive_field_caution.acc_change_rate_ =
      input_json["speed_reversed_repulsive_field_caution"]["acc_change_rate_"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.filed_check_area_length =
      input_json["speed_reversed_repulsive_field_caution"]
                ["filed_check_area_length"]
                    .asDouble();
  dest.speed_reversed_repulsive_field_caution.lane_bound_left_expend_buffer =
      input_json["speed_reversed_repulsive_field_caution"]
                ["lane_bound_left_expend_buffer"]
                    .asDouble();
  dest.speed_reversed_repulsive_field_caution.lane_bound_right_expend_buffer =
      input_json["speed_reversed_repulsive_field_caution"]
                ["lane_bound_right_expend_buffer"]
                    .asDouble();
  dest.speed_reversed_repulsive_field_caution.speed_reverse_heading_diff_min =
      input_json["speed_reversed_repulsive_field_caution"]
                ["speed_reverse_heading_diff_min"]
                    .asDouble();
  dest.speed_reversed_repulsive_field_caution.reverse_trajectory_max_point_num =
      input_json["speed_reversed_repulsive_field_caution"]
                ["reverse_trajectory_max_point_num"]
                    .asInt();
  dest.speed_reversed_repulsive_field_caution.repulsive_para =
      input_json["speed_reversed_repulsive_field_caution"]["repulsive_para"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.deduction_para =
      input_json["speed_reversed_repulsive_field_caution"]["deduction_para"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.act_time =
      input_json["speed_reversed_repulsive_field_caution"]["act_time"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.a_ego_acc =
      input_json["speed_reversed_repulsive_field_caution"]["a_ego_acc"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.a_obs_acc =
      input_json["speed_reversed_repulsive_field_caution"]["a_obs_acc"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.a_ego_brake =
      input_json["speed_reversed_repulsive_field_caution"]["a_ego_brake"]
          .asDouble();
  dest.speed_reversed_repulsive_field_caution.a_obs_brake =
      input_json["speed_reversed_repulsive_field_caution"]["a_obs_brake"]
          .asDouble();
  dest.control_tuning_config.control_speed_tuning.test_mode =
      input_json["control_tuning_config"]["control_speed_tuning"]["test_mode"]
          .asInt();
  dest.control_tuning_config.control_speed_tuning.start_t =
      input_json["control_tuning_config"]["control_speed_tuning"]["start_t"]
          .asDouble();
  dest.control_tuning_config.control_speed_tuning.max_v =
      input_json["control_tuning_config"]["control_speed_tuning"]["max_v"]
          .asDouble();
  dest.control_tuning_config.control_speed_tuning.min_v =
      input_json["control_tuning_config"]["control_speed_tuning"]["min_v"]
          .asDouble();
  dest.control_tuning_config.control_speed_tuning.delta_t =
      input_json["control_tuning_config"]["control_speed_tuning"]["delta_t"]
          .asInt();
  dest.control_tuning_config.control_path_tuning.length_1 =
      input_json["control_tuning_config"]["control_path_tuning"]["length_1"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.curv_1 =
      input_json["control_tuning_config"]["control_path_tuning"]["curv_1"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.length_2 =
      input_json["control_tuning_config"]["control_path_tuning"]["length_2"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.curv_2 =
      input_json["control_tuning_config"]["control_path_tuning"]["curv_2"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.length_3 =
      input_json["control_tuning_config"]["control_path_tuning"]["length_3"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.curv_3 =
      input_json["control_tuning_config"]["control_path_tuning"]["curv_3"]
          .asDouble();
  dest.control_tuning_config.control_path_tuning.road_width =
      input_json["control_tuning_config"]["control_path_tuning"]["road_width"]
          .asDouble();
  dest.traffic_light_law_config.active_protect =
      input_json["traffic_light_law_config"]["active_protect"].asBool();
  dest.traffic_light_law_config.enable_second_stop_line_protect =
      input_json["traffic_light_law_config"]["enable_second_stop_line_protect"]
          .asBool();
  dest.traffic_light_law_config.active_protect_dis =
      input_json["traffic_light_law_config"]["active_protect_dis"].asDouble();
  dest.traffic_light_law_config.behind_active_protect_min_time =
      input_json["traffic_light_law_config"]["behind_active_protect_min_time"]
          .asDouble();
  dest.traffic_light_law_config.forward_active_protect_min_time =
      input_json["traffic_light_law_config"]["forward_active_protect_min_time"]
          .asDouble();
  dest.traffic_light_y_law_config.enable_traffic_light_y =
      input_json["traffic_light_y_law_config"]["enable_traffic_light_y"]
          .asBool();
  dest.restricted_area_law_config.enable_restricted_area =
      input_json["restricted_area_law_config"]["enable_restricted_area"]
          .asBool();
  dest.lane_borrow_speed_decider_config.ignore_reversed_obs =
      input_json["lane_borrow_speed_decider_config"]["ignore_reversed_obs"]
          .asBool();
  dest.lane_borrow_speed_decider_config.longi_safe_dis =
      input_json["lane_borrow_speed_decider_config"]["longi_safe_dis"]
          .asDouble();
  dest.lane_borrow_speed_decider_config.longi_size_dis_ratio =
      input_json["lane_borrow_speed_decider_config"]["longi_size_dis_ratio"]
          .asDouble();
  dest.lane_borrow_speed_decider_config.lat_safe_dis =
      input_json["lane_borrow_speed_decider_config"]["lat_safe_dis"].asDouble();
  dest.lane_borrow_speed_decider_config.lat_size_dis_ratio =
      input_json["lane_borrow_speed_decider_config"]["lat_size_dis_ratio"]
          .asDouble();
  dest.lane_borrow_speed_decider_config.back_attention_ratio =
      input_json["lane_borrow_speed_decider_config"]["back_attention_ratio"]
          .asDouble();
  dest.lane_borrow_speed_decider_config.next_attention_ego_enlarge_ratio =
      input_json["lane_borrow_speed_decider_config"]
                ["next_attention_ego_enlarge_ratio"]
                    .asDouble();
  dest.lane_borrow_speed_decider_config.next_front_attention_length =
      input_json["lane_borrow_speed_decider_config"]
                ["next_front_attention_length"]
                    .asInt();
  dest.lane_borrow_speed_decider_config.next_back_attention_length =
      input_json["lane_borrow_speed_decider_config"]
                ["next_back_attention_length"]
                    .asInt();
  dest.lane_borrow_speed_decider_config
      .dynamic_forward_obs_prediction_max_time =
      input_json["lane_borrow_speed_decider_config"]
                ["dynamic_forward_obs_prediction_max_time"]
                    .asDouble();
  dest.lane_borrow_speed_decider_config
      .dynamic_reverse_obs_prediction_max_time =
      input_json["lane_borrow_speed_decider_config"]
                ["dynamic_reverse_obs_prediction_max_time"]
                    .asDouble();
  dest.lane_borrow_speed_decider_config.ttc =
      input_json["lane_borrow_speed_decider_config"]["ttc"].asDouble();
  dest.lane_borrow_speed_decider_config.thw =
      input_json["lane_borrow_speed_decider_config"]["thw"].asDouble();
  dest.lane_borrow_speed_decider_config.obs_length_enlarge =
      input_json["lane_borrow_speed_decider_config"]["obs_length_enlarge"]
          .asDouble();
  dest.lane_borrow_speed_decider_config.obs_width_enlarge =
      input_json["lane_borrow_speed_decider_config"]["obs_width_enlarge"]
          .asDouble();
  dest.path_region_search_config.enable_create_virtual_obs =
      input_json["path_region_search_config"]["enable_create_virtual_obs"]
          .asBool();
  dest.path_region_search_config.predict_time =
      input_json["path_region_search_config"]["predict_time"].asDouble();
  dest.path_region_search_config.delta_a =
      input_json["path_region_search_config"]["delta_a"].asDouble();
  dest.path_observe_ref_decider_config.enable_lane_borrow =
      input_json["path_observe_ref_decider_config"]["enable_lane_borrow"]
          .asBool();
  dest.path_observe_ref_decider_config.enable_follow_obs =
      input_json["path_observe_ref_decider_config"]["enable_follow_obs"]
          .asBool();
  dest.path_observe_ref_decider_config.enable_reverse_obs =
      input_json["path_observe_ref_decider_config"]["enable_reverse_obs"]
          .asBool();
  dest.path_observe_ref_decider_config.front_junction_distance =
      input_json["path_observe_ref_decider_config"]["front_junction_distance"]
          .asDouble();
  dest.path_observe_ref_decider_config.has_road_bound_max_width =
      input_json["path_observe_ref_decider_config"]["has_road_bound_max_width"]
          .asDouble();
  dest.path_observe_ref_decider_config.lane_turn_preview_distance =
      input_json["path_observe_ref_decider_config"]
                ["lane_turn_preview_distance"]
                    .asDouble();
  dest.path_observe_ref_decider_config.vhe_v_filter_ratio =
      input_json["path_observe_ref_decider_config"]["vhe_v_filter_ratio"]
          .asDouble();
  dest.path_observe_ref_decider_config.filter_vhe_v_threshold =
      input_json["path_observe_ref_decider_config"]["filter_vhe_v_threshold"]
          .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition.single_road_check_dis =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["single_road_check_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition
      .front_longitudinal_range =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["front_longitudinal_range"]
                    .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition.front_lateral_range =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["front_lateral_range"]
                    .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition.left_right_front_range =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["left_right_front_range"]
                    .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition.left_right_back_range =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["left_right_back_range"]
                    .asDouble();
  dest.path_observe_ref_decider_config.ranges_partition
      .left_right_lateral_range =
      input_json["path_observe_ref_decider_config"]["ranges_partition"]
                ["left_right_lateral_range"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .lane_borrow_front_attention_dis =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_front_attention_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .lane_borrow_back_attention_dis =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_back_attention_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .dynamic_obs_lateral_attention_dis =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["dynamic_obs_lateral_attention_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .lane_borrow_attention_dynamic_speed =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_attention_dynamic_speed"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow.dynamic_obs_heading_diff =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["dynamic_obs_heading_diff"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .lane_borrow_observe_l_filter_ratio =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_observe_l_filter_ratio"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow.lane_borrow_width_threshold =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_width_threshold"]
                    .asDouble();
  dest.path_observe_ref_decider_config.lane_borrow
      .lane_borrow_observe_l_safe_width =
      input_json["path_observe_ref_decider_config"]["lane_borrow"]
                ["lane_borrow_observe_l_safe_width"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.front_safe_dis =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["front_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.back_safe_dis =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["back_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.lateral_safe_dis =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["lateral_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.lateral_ratio =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["lateral_ratio"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.max_lateral_change_l =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["max_lateral_change_l"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.lateral_min_dis =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["lateral_min_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.follow_obs.min_road_dis =
      input_json["path_observe_ref_decider_config"]["follow_obs"]
                ["min_road_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.front_safe_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["front_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.back_safe_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["back_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.lateral_safe_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["lateral_safe_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.trigger_valid_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["trigger_valid_dis"]
                    .asInt();
  dest.path_observe_ref_decider_config.reverse_obs.lateral_ratio =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["lateral_ratio"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.max_lateral_change_l =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["max_lateral_change_l"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.lateral_min_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["lateral_min_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reverse_obs.min_road_dis =
      input_json["path_observe_ref_decider_config"]["reverse_obs"]
                ["min_road_dis"]
                    .asDouble();
  dest.path_observe_ref_decider_config.danger_range.front_dis =
      input_json["path_observe_ref_decider_config"]["danger_range"]["front_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.danger_range.back_dis =
      input_json["path_observe_ref_decider_config"]["danger_range"]["back_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.danger_range.left_dis =
      input_json["path_observe_ref_decider_config"]["danger_range"]["left_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.danger_range.right_dis =
      input_json["path_observe_ref_decider_config"]["danger_range"]["right_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_front_dis =
      input_json["path_observe_ref_decider_config"]["observe_front_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_back_dis =
      input_json["path_observe_ref_decider_config"]["observe_back_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_left_dis =
      input_json["path_observe_ref_decider_config"]["observe_left_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_right_dis =
      input_json["path_observe_ref_decider_config"]["observe_right_dis"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_low_speed =
      input_json["path_observe_ref_decider_config"]["observe_low_speed"]
          .asDouble();
  dest.path_observe_ref_decider_config.observe_high_speed =
      input_json["path_observe_ref_decider_config"]["observe_high_speed"]
          .asDouble();
  dest.path_observe_ref_decider_config.veh_pre_min_v =
      input_json["path_observe_ref_decider_config"]["veh_pre_min_v"].asDouble();
  dest.path_observe_ref_decider_config.veh_pre_add_v =
      input_json["path_observe_ref_decider_config"]["veh_pre_add_v"].asDouble();
  dest.path_observe_ref_decider_config.filter_obs_heading_threshold =
      input_json["path_observe_ref_decider_config"]
                ["filter_obs_heading_threshold"]
                    .asDouble();
  dest.path_observe_ref_decider_config.use_reference_heading_threshold =
      input_json["path_observe_ref_decider_config"]
                ["use_reference_heading_threshold"]
                    .asDouble();
  dest.path_observe_ref_decider_config.reference_heading_ratio =
      input_json["path_observe_ref_decider_config"]["reference_heading_ratio"]
          .asDouble();
  dest.path_observe_ref_decider_config.min_len =
      input_json["path_observe_ref_decider_config"]["min_len"].asDouble();
  dest.path_observe_ref_decider_config.max_len =
      input_json["path_observe_ref_decider_config"]["max_len"].asDouble();
  dest.path_observe_ref_decider_config.min_wid =
      input_json["path_observe_ref_decider_config"]["min_wid"].asDouble();
  dest.path_observe_ref_decider_config.max_wid =
      input_json["path_observe_ref_decider_config"]["max_wid"].asDouble();
  dest.path_observe_ref_decider_config.predict_total_time =
      input_json["path_observe_ref_decider_config"]["predict_total_time"]
          .asDouble();
  dest.path_observe_ref_decider_config.use_prev_trajectory =
      input_json["path_observe_ref_decider_config"]["use_prev_trajectory"]
          .asBool();
  dest.path_observe_ref_decider_config.observe_obs_num =
      input_json["path_observe_ref_decider_config"]["observe_obs_num"].asInt();
  dest.path_observe_ref_decider_config.extend_buff =
      input_json["path_observe_ref_decider_config"]["extend_buff"].asDouble();
  dest.path_observe_ref_decider_config.virtual_width =
      input_json["path_observe_ref_decider_config"]["virtual_width"].asDouble();
  dest.path_attention_region_decider_config.attention_front_dis =
      input_json["path_attention_region_decider_config"]["attention_front_dis"]
          .asDouble();
  dest.path_attention_region_decider_config.attention_back_dis =
      input_json["path_attention_region_decider_config"]["attention_back_dis"]
          .asDouble();
  dest.path_attention_region_decider_config.attention_left_dis =
      input_json["path_attention_region_decider_config"]["attention_left_dis"]
          .asDouble();
  dest.path_attention_region_decider_config.attention_right_dis =
      input_json["path_attention_region_decider_config"]["attention_right_dis"]
          .asDouble();
  dest.path_attention_region_decider_config.min_len =
      input_json["path_attention_region_decider_config"]["min_len"].asDouble();
  dest.path_attention_region_decider_config.max_len =
      input_json["path_attention_region_decider_config"]["max_len"].asDouble();
  dest.path_attention_region_decider_config.min_wid =
      input_json["path_attention_region_decider_config"]["min_wid"].asDouble();
  dest.path_attention_region_decider_config.max_wid =
      input_json["path_attention_region_decider_config"]["max_wid"].asDouble();
  dest.path_attention_region_decider_config.predict_time =
      input_json["path_attention_region_decider_config"]["predict_time"]
          .asDouble();
  dest.path_attention_region_decider_config.observe_limit_speed =
      input_json["path_attention_region_decider_config"]["observe_limit_speed"]
          .asDouble();
  dest.path_attention_region_decider_config.filter_obs_heading_threshold =
      input_json["path_attention_region_decider_config"]
                ["filter_obs_heading_threshold"]
                    .asDouble();
  dest.path_attention_region_decider_config.vel_heading_filter_ratio =
      input_json["path_attention_region_decider_config"]
                ["vel_heading_filter_ratio"]
                    .asDouble();
  dest.path_attention_region_decider_config.obs_maintaince_cnt =
      input_json["path_attention_region_decider_config"]["obs_maintaince_cnt"]
          .asInt();
  dest.speed_slow_down_decider_config.curb_check_distance =
      input_json["speed_slow_down_decider_config"]["curb_check_distance"]
          .asDouble();
  dest.collision_risk_check.front_area_s_length =
      input_json["collision_risk_check"]["front_area_s_length"].asDouble();
  dest.collision_risk_check.front_area_t_length =
      input_json["collision_risk_check"]["front_area_t_length"].asDouble();
  dest.collision_risk_check.front_area_l_buffer =
      input_json["collision_risk_check"]["front_area_l_buffer"].asDouble();
  dest.collision_risk_check.front_deceleration =
      input_json["collision_risk_check"]["front_deceleration"].asDouble();
  dest.collision_risk_check.front_heading_diff_threshold =
      input_json["collision_risk_check"]["front_heading_diff_threshold"]
          .asDouble();
  dest.collision_risk_check.front_safe_ttc_threshold =
      input_json["collision_risk_check"]["front_safe_ttc_threshold"].asDouble();
  dest.collision_risk_check.back_area_s_length =
      input_json["collision_risk_check"]["back_area_s_length"].asDouble();
  dest.collision_risk_check.back_area_l_buffer =
      input_json["collision_risk_check"]["back_area_l_buffer"].asDouble();
  dest.collision_risk_check.side_area_l_width =
      input_json["collision_risk_check"]["side_area_l_width"].asDouble();
  dest.collision_risk_check.side_heading_diff_threshold =
      input_json["collision_risk_check"]["side_heading_diff_threshold"]
          .asDouble();
  dest.collision_risk_check.side_vehicle_safe_l_dis =
      input_json["collision_risk_check"]["side_vehicle_safe_l_dis"].asDouble();
  dest.collision_risk_check.side_deceleration =
      input_json["collision_risk_check"]["side_deceleration"].asDouble();
  dest.collision_risk_check.side_l_speed_limit_ratio =
      input_json["collision_risk_check"]["side_l_speed_limit_ratio"].asDouble();
  dest.collision_risk_check.side_obs_speed_filter_ratio =
      input_json["collision_risk_check"]["side_obs_speed_filter_ratio"]
          .asDouble();
  dest.collision_risk_check.speed_limit_ratio =
      input_json["collision_risk_check"]["speed_limit_ratio"].asDouble();
  dest.collision_risk_check.obs_l_dis_filter_ratio =
      input_json["collision_risk_check"]["obs_l_dis_filter_ratio"].asDouble();
  dest.collision_risk_check.obs_overtake_dis_threshold =
      input_json["collision_risk_check"]["obs_overtake_dis_threshold"]
          .asDouble();
  dest.collision_risk_check.obs_turning_threshold =
      input_json["collision_risk_check"]["obs_turning_threshold"].asDouble();
  dest.collision_risk_check.info_size_relative_s =
      input_json["collision_risk_check"]["info_size_relative_s"].asInt();
  dest.collision_risk_check.info_size_cutin =
      input_json["collision_risk_check"]["info_size_cutin"].asInt();
  dest.collision_risk_check.info_size_heading =
      input_json["collision_risk_check"]["info_size_heading"].asInt();
  dest.obs_overtake_turn_right.check_area_front_length =
      input_json["obs_overtake_turn_right"]["check_area_front_length"]
          .asDouble();
  dest.obs_overtake_turn_right.check_area_back_length =
      input_json["obs_overtake_turn_right"]["check_area_back_length"]
          .asDouble();
  dest.obs_overtake_turn_right.check_area_width =
      input_json["obs_overtake_turn_right"]["check_area_width"].asDouble();
  dest.obs_overtake_turn_right.obs_turning_threshold =
      input_json["obs_overtake_turn_right"]["obs_turning_threshold"].asDouble();
  dest.obs_overtake_turn_right.obs_max_buffer_ratio =
      input_json["obs_overtake_turn_right"]["obs_max_buffer_ratio"].asDouble();
  dest.obs_overtake_turn_right.l_dis_limit_speed_ratio =
      input_json["obs_overtake_turn_right"]["l_dis_limit_speed_ratio"]
          .asDouble();
  dest.obs_overtake_turn_right.info_size_relative_s =
      input_json["obs_overtake_turn_right"]["info_size_relative_s"].asInt();
  dest.obs_overtake_turn_right.info_size_heading =
      input_json["obs_overtake_turn_right"]["info_size_heading"].asInt();
  dest.obs_overtake_turn_right.default_deceleration =
      input_json["obs_overtake_turn_right"]["default_deceleration"].asDouble();
  dest.obs_parallel_risk.history_info_size =
      input_json["obs_parallel_risk"]["history_info_size"].asInt();
  dest.obs_parallel_risk.lat_dis_shrink_buffer =
      input_json["obs_parallel_risk"]["lat_dis_shrink_buffer"].asDouble();
  dest.obs_parallel_risk.default_deceleration =
      input_json["obs_parallel_risk"]["default_deceleration"].asDouble();
  dest.obs_parallel_risk.lat_close_min_cycle =
      input_json["obs_parallel_risk"]["lat_close_min_cycle"].asInt();
  dest.obs_parallel_risk.parallel_min_cycle =
      input_json["obs_parallel_risk"]["parallel_min_cycle"].asInt();
  dest.obs_parallel_risk.yield_min_peed =
      input_json["obs_parallel_risk"]["yield_min_peed"].asDouble();
  dest.speed_unprotected_turn_decider_config.kappa_sign =
      input_json["speed_unprotected_turn_decider_config"]["kappa_sign"]
          .asDouble();
  dest.speed_unprotected_turn_decider_config.t =
      input_json["speed_unprotected_turn_decider_config"]["t"].asDouble();
  dest.speed_unprotected_turn_decider_config.lower_distance_buffer =
      input_json["speed_unprotected_turn_decider_config"]
                ["lower_distance_buffer"]
                    .asDouble();
  dest.speed_unprotected_turn_decider_config.max_front_distance =
      input_json["speed_unprotected_turn_decider_config"]["max_front_distance"]
          .asInt();
  dest.speed_unprotected_turn_decider_config.min_curvachange =
      input_json["speed_unprotected_turn_decider_config"]["min_curvachange"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.obs_prediction_dis =
      input_json["speed_vehicle_merging_decider_config"]["obs_prediction_dis"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.merging_safe_dis =
      input_json["speed_vehicle_merging_decider_config"]["merging_safe_dis"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.merging_safe_ttc =
      input_json["speed_vehicle_merging_decider_config"]["merging_safe_ttc"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.merging_adc_buffer =
      input_json["speed_vehicle_merging_decider_config"]["merging_adc_buffer"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.limit_max_deceleration =
      input_json["speed_vehicle_merging_decider_config"]
                ["limit_max_deceleration"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config.consider_adc_front_dis =
      input_json["speed_vehicle_merging_decider_config"]
                ["consider_adc_front_dis"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config.consider_adc_back_speed_ratio =
      input_json["speed_vehicle_merging_decider_config"]
                ["consider_adc_back_speed_ratio"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config.all_delay_time =
      input_json["speed_vehicle_merging_decider_config"]["all_delay_time"]
          .asDouble();
  dest.speed_vehicle_merging_decider_config.safe_limit_config_distance =
      input_json["speed_vehicle_merging_decider_config"]
                ["safe_limit_config_distance"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config.attention_max_accumulate_s =
      input_json["speed_vehicle_merging_decider_config"]
                ["attention_max_accumulate_s"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config
      .ego_lane_obs_ignore_by_straight_valid_range =
      input_json["speed_vehicle_merging_decider_config"]
                ["ego_lane_obs_ignore_by_straight_valid_range"]
                    .asDouble();
  dest.speed_vehicle_merging_decider_config
      .ego_lane_obs_ignore_by_straight_valid_time_length =
      input_json["speed_vehicle_merging_decider_config"]
                ["ego_lane_obs_ignore_by_straight_valid_time_length"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.static_game_theory_a =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["static_game_theory_a"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.static_game_theory_c =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["static_game_theory_c"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.static_game_theory_margin =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["static_game_theory_margin"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.rush_velocity_increment =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["rush_velocity_increment"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.agent_filter_far_end =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["agent_filter_far_end"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.agent_filter_near_end =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["agent_filter_near_end"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.agent_filter_rush_far_end =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["agent_filter_rush_far_end"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.vehicle_param_max_lonacc =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["vehicle_param_max_lonacc"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.vehicle_param_max_lonbrake =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["vehicle_param_max_lonbrake"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.vehicle_param_max_latacc =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["vehicle_param_max_latacc"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.conflict_area_integration_gap =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["conflict_area_integration_gap"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.speed_back_pedestrain_pre_time =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["speed_back_pedestrain_pre_time"]
                    .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.special_t_upper =
      input_json["speed_vehicle_back_cipv_decider_config"]["special_t_upper"]
          .asDouble();
  dest.speed_vehicle_back_cipv_decider_config.constant_mergein_acc_base_map =
      input_json["speed_vehicle_back_cipv_decider_config"]
                ["constant_mergein_acc_base_map"]
                    .asDouble();
  dest.speed_static_obs_pre_decision_decider_config
      .static_obs_width_handle_ratio =
      input_json["speed_static_obs_pre_decision_decider_config"]
                ["static_obs_width_handle_ratio"]
                    .asDouble();
  dest.speed_start_side_by_side_decider_config.check_area_width =
      input_json["speed_start_side_by_side_decider_config"]["check_area_width"]
          .asDouble();
  dest.speed_start_side_by_side_decider_config.check_area_front_buffer =
      input_json["speed_start_side_by_side_decider_config"]
                ["check_area_front_buffer"]
                    .asDouble();
  dest.speed_start_side_by_side_decider_config.check_area_back_buffer =
      input_json["speed_start_side_by_side_decider_config"]
                ["check_area_back_buffer"]
                    .asDouble();
  dest.speed_start_side_by_side_decider_config.risk_obs_judge_size =
      input_json["speed_start_side_by_side_decider_config"]
                ["risk_obs_judge_size"]
                    .asDouble();
  dest.speed_start_side_by_side_decider_config.static_obs_wait_cycle =
      input_json["speed_start_side_by_side_decider_config"]
                ["static_obs_wait_cycle"]
                    .asInt();
  dest.speed_stop_to_give_way_decider_config.check_area_width =
      input_json["speed_stop_to_give_way_decider_config"]["check_area_width"]
          .asDouble();
  dest.speed_stop_to_give_way_decider_config.check_area_front_buffer =
      input_json["speed_stop_to_give_way_decider_config"]
                ["check_area_front_buffer"]
                    .asDouble();
  dest.speed_stop_to_give_way_decider_config.check_area_back_buffer =
      input_json["speed_stop_to_give_way_decider_config"]
                ["check_area_back_buffer"]
                    .asDouble();
  dest.speed_stop_to_give_way_decider_config.give_way_width =
      input_json["speed_stop_to_give_way_decider_config"]["give_way_width"]
          .asDouble();
  dest.speed_stop_to_give_way_decider_config.give_way_front_buffer =
      input_json["speed_stop_to_give_way_decider_config"]
                ["give_way_front_buffer"]
                    .asDouble();
  dest.speed_stop_to_give_way_decider_config.give_way_back_buffer =
      input_json["speed_stop_to_give_way_decider_config"]
                ["give_way_back_buffer"]
                    .asDouble();
  dest.speed_stop_to_give_way_decider_config.risk_obs_min_size =
      input_json["speed_stop_to_give_way_decider_config"]["risk_obs_min_size"]
          .asDouble();
  dest.speed_stop_to_give_way_decider_config.history_info_size =
      input_json["speed_stop_to_give_way_decider_config"]["history_info_size"]
          .asInt();
  dest.speed_stop_to_give_way_decider_config.static_obs_wait_cycle =
      input_json["speed_stop_to_give_way_decider_config"]
                ["static_obs_wait_cycle"]
                    .asInt();
  dest.speed_stop_to_give_way_decider_config.obs_turning_threshold =
      input_json["speed_stop_to_give_way_decider_config"]
                ["obs_turning_threshold"]
                    .asDouble();
  dest.speed_stop_to_go_freespace_decider_config.freespace_check_dis =
      input_json["speed_stop_to_go_freespace_decider_config"]
                ["freespace_check_dis"]
                    .asDouble();
  dest.speed_stop_to_go_freespace_decider_config.adc_speed_threshold =
      input_json["speed_stop_to_go_freespace_decider_config"]
                ["adc_speed_threshold"]
                    .asDouble();
  dest.speed_stop_to_go_freespace_decider_config.obs_keep_cnt =
      input_json["speed_stop_to_go_freespace_decider_config"]["obs_keep_cnt"]
          .asInt();
  dest.speed_stop_to_go_freespace_decider_config.request_sd_cnt =
      input_json["speed_stop_to_go_freespace_decider_config"]["request_sd_cnt"]
          .asInt();
  dest.speed_perception_obstacle_caution_decider_config.adc_enlarge_buffer =
      input_json["speed_perception_obstacle_caution_decider_config"]
                ["adc_enlarge_buffer"]
                    .asDouble();
  dest.speed_perception_obstacle_caution_decider_config
      .static_obs_slow_down_buffer =
      input_json["speed_perception_obstacle_caution_decider_config"]
                ["static_obs_slow_down_buffer"]
                    .asDouble();
  dest.speed_perception_obstacle_caution_decider_config.slow_down_target_speed =
      input_json["speed_perception_obstacle_caution_decider_config"]
                ["slow_down_target_speed"]
                    .asDouble();
  dest.speed_perception_obstacle_caution_decider_config.all_delay_time =
      input_json["speed_perception_obstacle_caution_decider_config"]
                ["all_delay_time"]
                    .asDouble();
  dest.speed_perception_obstacle_caution_decider_config.limit_max_deceleration =
      input_json["speed_perception_obstacle_caution_decider_config"]
                ["limit_max_deceleration"]
                    .asDouble();
  dest.speed_kappa_limit_speed_config.check_kappa_min_time =
      input_json["speed_kappa_limit_speed_config"]["check_kappa_min_time"]
          .asDouble();
  dest.speed_kappa_limit_speed_config.check_kappa_min_dis =
      input_json["speed_kappa_limit_speed_config"]["check_kappa_min_dis"]
          .asDouble();
  dest.speed_kappa_limit_speed_config.kappa_list.clear();
  for (const auto &curr_config :
       input_json["speed_kappa_limit_speed_config"]["kappa_list"]) {
    dest.speed_kappa_limit_speed_config.kappa_list.push_back(
        curr_config.asDouble());
  }
  dest.speed_kappa_limit_speed_config.speed_limit_list.clear();
  for (const auto &curr_config :
       input_json["speed_kappa_limit_speed_config"]["speed_limit_list"]) {
    dest.speed_kappa_limit_speed_config.speed_limit_list.push_back(
        curr_config.asDouble());
  }
  dest.speed_ghost_flash_decider_config.only_consider_cross_road =
      input_json["speed_ghost_flash_decider_config"]["only_consider_cross_road"]
          .asBool();
  dest.speed_ghost_flash_decider_config.check_area_length =
      input_json["speed_ghost_flash_decider_config"]["check_area_length"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.check_area_time =
      input_json["speed_ghost_flash_decider_config"]["check_area_time"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.check_area_width =
      input_json["speed_ghost_flash_decider_config"]["check_area_width"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.obs_buffer =
      input_json["speed_ghost_flash_decider_config"]["obs_buffer"].asDouble();
  dest.speed_ghost_flash_decider_config.dynamic_obs_safe_dis =
      input_json["speed_ghost_flash_decider_config"]["dynamic_obs_safe_dis"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.dynamic_obs_speed_threshold =
      input_json["speed_ghost_flash_decider_config"]
                ["dynamic_obs_speed_threshold"]
                    .asDouble();
  dest.speed_ghost_flash_decider_config.limit_max_deceleration =
      input_json["speed_ghost_flash_decider_config"]["limit_max_deceleration"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.limit_min_speed_ratio =
      input_json["speed_ghost_flash_decider_config"]["limit_min_speed_ratio"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.all_delay_time =
      input_json["speed_ghost_flash_decider_config"]["all_delay_time"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.closer_cnt_threshold =
      input_json["speed_ghost_flash_decider_config"]["closer_cnt_threshold"]
          .asInt();
  dest.speed_ghost_flash_decider_config.lat_attention_dis =
      input_json["speed_ghost_flash_decider_config"]["lat_attention_dis"]
          .asDouble();
  dest.speed_ghost_flash_decider_config.lat_dis_list.clear();
  for (const auto &curr_config :
       input_json["speed_ghost_flash_decider_config"]["lat_dis_list"]) {
    dest.speed_ghost_flash_decider_config.lat_dis_list.push_back(
        curr_config.asDouble());
  }
  dest.speed_ghost_flash_decider_config.speed_limit_list.clear();
  for (const auto &curr_config :
       input_json["speed_ghost_flash_decider_config"]["speed_limit_list"]) {
    dest.speed_ghost_flash_decider_config.speed_limit_list.push_back(
        curr_config.asDouble());
  }
  dest.speed_prediction_pre_decision_decider_config
      .obs_adc_reverse_heading_diff =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_adc_reverse_heading_diff"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config
      .obs_path_reverse_heading_diff =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_path_reverse_heading_diff"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config
      .obs_adc_vertical_heading_diff_delta =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_adc_vertical_heading_diff_delta"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config.obs_path_heading_diff =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_path_heading_diff"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config
      .obs_adc_safe_dis_cross_road =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_adc_safe_dis_cross_road"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config.obs_adc_safe_dis_straight =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_adc_safe_dis_straight"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config.obs_path_safe_dis =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_path_safe_dis"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config.obs_lower_point_mis_s =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_lower_point_mis_s"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config
      .obs_to_adc_front_edge_delta =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["obs_to_adc_front_edge_delta"]
                    .asDouble();
  dest.speed_prediction_pre_decision_decider_config.right_consider =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["right_consider"]
                    .asBool();
  dest.speed_prediction_pre_decision_decider_config.reverse_heading_diff =
      input_json["speed_prediction_pre_decision_decider_config"]
                ["reverse_heading_diff"]
                    .asDouble();
  dest.speed_pedestrain_protect_decider_config.long_check_dis =
      input_json["speed_pedestrain_protect_decider_config"]["long_check_dis"]
          .asDouble();
  dest.speed_pedestrain_protect_decider_config.long_check_time =
      input_json["speed_pedestrain_protect_decider_config"]["long_check_time"]
          .asDouble();
  dest.speed_pedestrain_protect_decider_config.history_data_size =
      input_json["speed_pedestrain_protect_decider_config"]["history_data_size"]
          .asInt();
  dest.speed_pedestrain_protect_decider_config.lat_dis_speed_ratio =
      input_json["speed_pedestrain_protect_decider_config"]
                ["lat_dis_speed_ratio"]
                    .asDouble();
  dest.speed_pedestrain_protect_decider_config.min_speed_limit =
      input_json["speed_pedestrain_protect_decider_config"]["min_speed_limit"]
          .asDouble();
  dest.speed_pedestrain_protect_decider_config.tan_threshold =
      input_json["speed_pedestrain_protect_decider_config"]["tan_threshold"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.total_path_length =
      input_json["dp_st_graph_config"]["dp_st_config"]["total_path_length"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.matrix_dimension_s =
      input_json["dp_st_graph_config"]["dp_st_config"]["matrix_dimension_s"]
          .asInt();
  dest.dp_st_graph_config.dp_st_config.matrix_dimension_t =
      input_json["dp_st_graph_config"]["dp_st_config"]["matrix_dimension_t"]
          .asInt();
  dest.dp_st_graph_config.dp_st_config.max_speed_tolerance =
      input_json["dp_st_graph_config"]["dp_st_config"]["max_speed_tolerance"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.init_speed_tolerance =
      input_json["dp_st_graph_config"]["dp_st_config"]["init_speed_tolerance"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.speed_weight =
      input_json["dp_st_graph_config"]["dp_st_config"]["speed_weight"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.accel_weight =
      input_json["dp_st_graph_config"]["dp_st_config"]["accel_weight"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.jerk_weight =
      input_json["dp_st_graph_config"]["dp_st_config"]["jerk_weight"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.reference_weight =
      input_json["dp_st_graph_config"]["dp_st_config"]["reference_weight"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.obstacle_weight =
      input_json["dp_st_graph_config"]["dp_st_config"]["obstacle_weight"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.st_graph_default_point_cost =
      input_json["dp_st_graph_config"]["dp_st_config"]
                ["st_graph_default_point_cost"]
                    .asDouble();
  dest.dp_st_graph_config.dp_st_config.st_graph_nudge_default_cost =
      input_json["dp_st_graph_config"]["dp_st_config"]
                ["st_graph_nudge_default_cost"]
                    .asDouble();
  dest.dp_st_graph_config.dp_st_config.obstacle_damp_factor =
      input_json["dp_st_graph_config"]["dp_st_config"]["obstacle_damp_factor"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.expected_distance_slack_factor =
      input_json["dp_st_graph_config"]["dp_st_config"]
                ["expected_distance_slack_factor"]
                    .asDouble();
  dest.dp_st_graph_config.dp_st_config.nudge_max_lateral_distance =
      input_json["dp_st_graph_config"]["dp_st_config"]
                ["nudge_max_lateral_distance"]
                    .asDouble();
  dest.dp_st_graph_config.dp_st_config.nudge_minimal_speed =
      input_json["dp_st_graph_config"]["dp_st_config"]["nudge_minimal_speed"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.nudge_distance_coeff =
      input_json["dp_st_graph_config"]["dp_st_config"]["nudge_distance_coeff"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.obstacle_distance_coeff =
      input_json["dp_st_graph_config"]["dp_st_config"]
                ["obstacle_distance_coeff"]
                    .asDouble();
  dest.dp_st_graph_config.dp_st_config.exceed_speed_penalty =
      input_json["dp_st_graph_config"]["dp_st_config"]["exceed_speed_penalty"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.low_speed_penalty =
      input_json["dp_st_graph_config"]["dp_st_config"]["low_speed_penalty"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.accel_penalty =
      input_json["dp_st_graph_config"]["dp_st_config"]["accel_penalty"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.decel_penalty =
      input_json["dp_st_graph_config"]["dp_st_config"]["decel_penalty"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.positive_jerk_coeff =
      input_json["dp_st_graph_config"]["dp_st_config"]["positive_jerk_coeff"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.negative_jerk_coeff =
      input_json["dp_st_graph_config"]["dp_st_config"]["negative_jerk_coeff"]
          .asDouble();
  dest.dp_st_graph_config.dp_st_config.exceed_jerk_penalty =
      input_json["dp_st_graph_config"]["dp_st_config"]["exceed_jerk_penalty"]
          .asDouble();
  dest.dp_st_graph_config.st_boundary_config.boundary_buffer =
      input_json["dp_st_graph_config"]["st_boundary_config"]["boundary_buffer"]
          .asDouble();
  dest.dp_st_graph_config.st_boundary_config.minimal_follow_time =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["minimal_follow_time"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.minimal_yield_time =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["minimal_yield_time"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.kappa_threshold =
      input_json["dp_st_graph_config"]["st_boundary_config"]["kappa_threshold"]
          .asDouble();
  dest.dp_st_graph_config.st_boundary_config.lowest_speed =
      input_json["dp_st_graph_config"]["st_boundary_config"]["lowest_speed"]
          .asDouble();
  dest.dp_st_graph_config.st_boundary_config.default_characteristic_length =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["default_characteristic_length"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.nudge_lon_expand_dis =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["nudge_lon_expand_dis"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.nudge_lat_expand_dis =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["nudge_lat_expand_dis"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.static_obs_park_stop_dis =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["static_obs_park_stop_dis"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.static_obs_uturn_stop_dis =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["static_obs_uturn_stop_dis"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.virtual_obs_stop_dis =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["virtual_obs_stop_dis"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.max_decel_for_converse_obs =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["max_decel_for_converse_obs"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config.dynamic_obs_st_boundary_buffer =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["dynamic_obs_st_boundary_buffer"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config
      .dynamic_obs_st_boundary_yeild_buffer =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["dynamic_obs_st_boundary_yeild_buffer"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config
      .dynamic_obs_st_boundary_overtake_buffer =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["dynamic_obs_st_boundary_overtake_buffer"]
                    .asDouble();
  dest.dp_st_graph_config.st_boundary_config
      .dynamic_obs_use_polygon_dis_threshold =
      input_json["dp_st_graph_config"]["st_boundary_config"]
                ["dynamic_obs_use_polygon_dis_threshold"]
                    .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_stop_s =
      input_json["third_order_spline_speed_optimizer_config"]["weight_stop_s"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_stop_v =
      input_json["third_order_spline_speed_optimizer_config"]["weight_stop_v"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_follow_s =
      input_json["third_order_spline_speed_optimizer_config"]["weight_follow_s"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_follow_v =
      input_json["third_order_spline_speed_optimizer_config"]["weight_follow_v"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_yield_s =
      input_json["third_order_spline_speed_optimizer_config"]["weight_yield_s"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_yield_v =
      input_json["third_order_spline_speed_optimizer_config"]["weight_yield_v"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_overtake_s =
      input_json["third_order_spline_speed_optimizer_config"]
                ["weight_overtake_s"]
                    .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_overtake_v =
      input_json["third_order_spline_speed_optimizer_config"]
                ["weight_overtake_v"]
                    .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_cruise_s =
      input_json["third_order_spline_speed_optimizer_config"]["weight_cruise_s"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_cruise_v =
      input_json["third_order_spline_speed_optimizer_config"]["weight_cruise_v"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_a =
      input_json["third_order_spline_speed_optimizer_config"]["weight_a"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_jerk =
      input_json["third_order_spline_speed_optimizer_config"]["weight_jerk"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_slack =
      input_json["third_order_spline_speed_optimizer_config"]["weight_slack"]
          .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_hard_brake_s =
      input_json["third_order_spline_speed_optimizer_config"]
                ["weight_hard_brake_s"]
                    .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_hard_brake_v =
      input_json["third_order_spline_speed_optimizer_config"]
                ["weight_hard_brake_v"]
                    .asDouble();
  dest.third_order_spline_speed_optimizer_config.weight_hard_brake_a =
      input_json["third_order_spline_speed_optimizer_config"]
                ["weight_hard_brake_a"]
                    .asDouble();
  dest.minco_path_optimizer_config.wei_obs =
      input_json["minco_path_optimizer_config"]["wei_obs"].asDouble();
  dest.minco_path_optimizer_config.wei_shrink =
      input_json["minco_path_optimizer_config"]["wei_shrink"].asDouble();
  dest.minco_path_optimizer_config.wei_match =
      input_json["minco_path_optimizer_config"]["wei_match"].asDouble();
  dest.minco_path_optimizer_config.wei_vel =
      input_json["minco_path_optimizer_config"]["wei_vel"].asDouble();
  dest.minco_path_optimizer_config.wei_acc =
      input_json["minco_path_optimizer_config"]["wei_acc"].asDouble();
  dest.minco_path_optimizer_config.wei_latacc =
      input_json["minco_path_optimizer_config"]["wei_latacc"].asDouble();
  dest.minco_path_optimizer_config.wei_cur =
      input_json["minco_path_optimizer_config"]["wei_cur"].asDouble();
  dest.minco_path_optimizer_config.wei_phidot =
      input_json["minco_path_optimizer_config"]["wei_phidot"].asDouble();
  dest.minco_path_optimizer_config.wei_time =
      input_json["minco_path_optimizer_config"]["wei_time"].asDouble();
  dest.minco_path_optimizer_config.max_vel =
      input_json["minco_path_optimizer_config"]["max_vel"].asDouble();
  dest.minco_path_optimizer_config.max_acc =
      input_json["minco_path_optimizer_config"]["max_acc"].asDouble();
  dest.minco_path_optimizer_config.max_latacc =
      input_json["minco_path_optimizer_config"]["max_latacc"].asDouble();
  dest.minco_path_optimizer_config.max_cur =
      input_json["minco_path_optimizer_config"]["max_cur"].asDouble();
  dest.minco_path_optimizer_config.max_phidot =
      input_json["minco_path_optimizer_config"]["max_phidot"].asDouble();
  dest.minco_path_optimizer_config.grid_step =
      input_json["minco_path_optimizer_config"]["grid_step"].asDouble();
  dest.minco_path_optimizer_config.lateral_safe_dis =
      input_json["minco_path_optimizer_config"]["lateral_safe_dis"].asDouble();
  dest.minco_path_optimizer_config.longi_safe_dis =
      input_json["minco_path_optimizer_config"]["longi_safe_dis"].asDouble();
  dest.minco_path_optimizer_config.virtual_interval =
      input_json["minco_path_optimizer_config"]["virtual_interval"].asDouble();
  dest.minco_path_optimizer_config.min_piece_nums =
      input_json["minco_path_optimizer_config"]["min_piece_nums"].asInt();
  dest.minco_path_optimizer_config.min_speed =
      input_json["minco_path_optimizer_config"]["min_speed"].asDouble();
  dest.minco_path_optimizer_config.sample_s =
      input_json["minco_path_optimizer_config"]["sample_s"].asDouble();
  dest.minco_path_optimizer_config.reparam_sample_s =
      input_json["minco_path_optimizer_config"]["reparam_sample_s"].asDouble();
  dest.minco_path_optimizer_config.piece_cut_nums =
      input_json["minco_path_optimizer_config"]["piece_cut_nums"].asInt();
  dest.mpc_velocity_plan_optimizer_config.weight_s =
      input_json["mpc_velocity_plan_optimizer_config"]["weight_s"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.weight_v =
      input_json["mpc_velocity_plan_optimizer_config"]["weight_v"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.weight_a =
      input_json["mpc_velocity_plan_optimizer_config"]["weight_a"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.weight_jerk =
      input_json["mpc_velocity_plan_optimizer_config"]["weight_jerk"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.weight_slack =
      input_json["mpc_velocity_plan_optimizer_config"]["weight_slack"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.traffic_light_stop_dis =
      input_json["mpc_velocity_plan_optimizer_config"]["traffic_light_stop_dis"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.static_obs_stop_dis =
      input_json["mpc_velocity_plan_optimizer_config"]["static_obs_stop_dis"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.destination_stop_dis =
      input_json["mpc_velocity_plan_optimizer_config"]["destination_stop_dis"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.follow_delta_l_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["follow_delta_l_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.follow_delta_s_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["follow_delta_s_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.follow_delta_t_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["follow_delta_t_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.follow_ego_min_speed =
      input_json["mpc_velocity_plan_optimizer_config"]["follow_ego_min_speed"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.follow_heading_diff_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["follow_heading_diff_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.dynamic_obs_collide_s_buffer =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["dynamic_obs_collide_s_buffer"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.static_obs_collide_s_buffer =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["static_obs_collide_s_buffer"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.dynamic_obs_boundary_buffer =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["dynamic_obs_boundary_buffer"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.reverse_obs_boundary_buffer =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["reverse_obs_boundary_buffer"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.collide_judge_max_time =
      input_json["mpc_velocity_plan_optimizer_config"]["collide_judge_max_time"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.collide_judge_time_resolution =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["collide_judge_time_resolution"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.merge_back_min_distance_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["merge_back_min_distance_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.merge_back_thw_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["merge_back_thw_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.merge_back_ttc_threshold =
      input_json["mpc_velocity_plan_optimizer_config"]
                ["merge_back_ttc_threshold"]
                    .asDouble();
  dest.mpc_velocity_plan_optimizer_config.max_acc =
      input_json["mpc_velocity_plan_optimizer_config"]["max_acc"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.min_acc =
      input_json["mpc_velocity_plan_optimizer_config"]["min_acc"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.soft_acc_plus =
      input_json["mpc_velocity_plan_optimizer_config"]["soft_acc_plus"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.soft_acc_minus =
      input_json["mpc_velocity_plan_optimizer_config"]["soft_acc_minus"]
          .asDouble();
  dest.mpc_velocity_plan_optimizer_config.max_jerk =
      input_json["mpc_velocity_plan_optimizer_config"]["max_jerk"].asDouble();
  dest.mpc_velocity_plan_optimizer_config.min_jerk =
      input_json["mpc_velocity_plan_optimizer_config"]["min_jerk"].asDouble();
  dest.backup_speed_optimizer_config.static_min_a =
      input_json["backup_speed_optimizer_config"]["static_min_a"].asDouble();
  dest.backup_speed_optimizer_config.sample_max_a =
      input_json["backup_speed_optimizer_config"]["sample_max_a"].asDouble();
  dest.backup_speed_optimizer_config.indoor_min_a =
      input_json["backup_speed_optimizer_config"]["indoor_min_a"].asDouble();
  dest.backup_speed_optimizer_config.sample_min_a =
      input_json["backup_speed_optimizer_config"]["sample_min_a"].asDouble();
  dest.backup_speed_optimizer_config.sample_step =
      input_json["backup_speed_optimizer_config"]["sample_step"].asDouble();
  dest.backup_speed_optimizer_config.sanity_check_cal_s_by_a =
      input_json["backup_speed_optimizer_config"]["sanity_check_cal_s_by_a"]
          .asDouble();
  dest.geo_speed_optimizer_config.ttc =
      input_json["geo_speed_optimizer_config"]["ttc"].asDouble();
  dest.path_road_graph_config.path_goal_sl.obs_add_index =
      input_json["path_road_graph_config"]["path_goal_sl"]["obs_add_index"]
          .asInt();
  dest.path_road_graph_config.path_goal_sl.road_add_index =
      input_json["path_road_graph_config"]["path_goal_sl"]["road_add_index"]
          .asInt();
  dest.path_road_graph_config.path_goal_sl.max_lateral_sample_size =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["max_lateral_sample_size"]
                    .asInt();
  dest.path_road_graph_config.path_goal_sl.interval_l =
      input_json["path_road_graph_config"]["path_goal_sl"]["interval_l"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.ref_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["ref_cost"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.lateral_static_obs_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["lateral_static_obs_dis"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.lateral_static_obs_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["lateral_static_obs_cost"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.lateral_dis_ratio =
      input_json["path_road_graph_config"]["path_goal_sl"]["lateral_dis_ratio"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.lon_static_obs_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]["lon_static_obs_dis"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.car_box_lon_buffer =
      input_json["path_road_graph_config"]["path_goal_sl"]["car_box_lon_buffer"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.car_box_lateral_buffer =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["car_box_lateral_buffer"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.lon_static_obs_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["lon_static_obs_cost"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.road_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]["road_dis"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.road_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["road_cost"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.lane_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]["lane_dis"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.lane_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["lane_cost"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_lowpass_filter_ratio =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["dynamic_obs_lowpass_filter_ratio"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_init_cnt =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["dynamic_obs_init_cnt"]
                    .asInt();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_reduce_cnt =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["dynamic_obs_reduce_cnt"]
                    .asInt();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_count =
      input_json["path_road_graph_config"]["path_goal_sl"]["dynamic_obs_count"]
          .asInt();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]["dynamic_obs_dis"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.dynamic_obs_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["dynamic_obs_cost"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.history_path_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["history_path_cost"]
          .asDouble();
  dest.path_road_graph_config.path_goal_sl.history_path_min_dis =
      input_json["path_road_graph_config"]["path_goal_sl"]
                ["history_path_min_dis"]
                    .asDouble();
  dest.path_road_graph_config.path_goal_sl.smooth_cost =
      input_json["path_road_graph_config"]["path_goal_sl"]["smooth_cost"]
          .asDouble();
  dest.path_road_graph_config.path_shrink.min_shrink_dis =
      input_json["path_road_graph_config"]["path_shrink"]["min_shrink_dis"]
          .asDouble();
  dest.path_road_graph_config.path_shrink.kappa_length =
      input_json["path_road_graph_config"]["path_shrink"]["kappa_length"]
          .asDouble();
  dest.path_road_graph_config.road_extend_dis =
      input_json["path_road_graph_config"]["road_extend_dis"].asDouble();
  dest.third_order_spline_path_optimizer_config.weight_l0 =
      input_json["third_order_spline_path_optimizer_config"]["weight_l0"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_dl =
      input_json["third_order_spline_path_optimizer_config"]["weight_dl"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_ddl =
      input_json["third_order_spline_path_optimizer_config"]["weight_ddl"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_l1 =
      input_json["third_order_spline_path_optimizer_config"]["weight_l1"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_l2 =
      input_json["third_order_spline_path_optimizer_config"]["weight_l2"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_dddl =
      input_json["third_order_spline_path_optimizer_config"]["weight_dddl"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_slack_dl =
      input_json["third_order_spline_path_optimizer_config"]["weight_slack_dl"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_slack_ddl =
      input_json["third_order_spline_path_optimizer_config"]["weight_slack_ddl"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_slack_l1 =
      input_json["third_order_spline_path_optimizer_config"]["weight_slack_l1"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.weight_slack_l2 =
      input_json["third_order_spline_path_optimizer_config"]["weight_slack_l2"]
          .asDouble();
  dest.third_order_spline_path_optimizer_config.init_test_fix_flag =
      input_json["third_order_spline_path_optimizer_config"]
                ["init_test_fix_flag"]
                    .asBool();
  dest.third_order_spline_path_optimizer_config.init_test_current_speed_thersh =
      input_json["third_order_spline_path_optimizer_config"]
                ["init_test_current_speed_thersh"]
                    .asDouble();
  dest.third_order_spline_path_optimizer_config.init_test_delta_kappa_thersh =
      input_json["third_order_spline_path_optimizer_config"]
                ["init_test_delta_kappa_thersh"]
                    .asDouble();
  dest.path_backup_optimizer_config.weight_l =
      input_json["path_backup_optimizer_config"]["weight_l"].asDouble();
  dest.path_backup_optimizer_config.weight_dl =
      input_json["path_backup_optimizer_config"]["weight_dl"].asDouble();
  dest.path_backup_optimizer_config.weight_ddl =
      input_json["path_backup_optimizer_config"]["weight_ddl"].asDouble();
  dest.path_backup_optimizer_config.weight_dddl =
      input_json["path_backup_optimizer_config"]["weight_dddl"].asDouble();
  dest.motorway_speed_confilict_decider_config.conflict_data.base_path
      .obs_prediction_dis =
      input_json["motorway_speed_confilict_decider_config"]["conflict_data"]
                ["base_path"]["obs_prediction_dis"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.conflict_data.base_path
      .adc_buffer = input_json["motorway_speed_confilict_decider_config"]
                              ["conflict_data"]["base_path"]["adc_buffer"]
                                  .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .diverging_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["diverging_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["diverging_road_scenario_config"]["game_params"]
                 ["diverging_road"]["param_a"]) {
    dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
        .game_params.diverging_road.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["diverging_road_scenario_config"]["game_params"]
                 ["diverging_road"]["param_c"]) {
    dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
        .game_params.diverging_road.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["diverging_road_scenario_config"]["game_params"]
                 ["diverging_road"]["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
        .game_params.diverging_road.param_margin.push_back(
            curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["diverging_road_scenario_config"]["game_params"]
                 ["diverging_road"]["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
        .game_params.diverging_road.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["diverging_road_scenario_config"]["game_params"]
                 ["diverging_road"]["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
        .game_params.diverging_road.yield_time.push_back(
            curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["game_params"]
                ["diverging_road"]["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .game_params.diverging_road.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["game_params"]
                ["diverging_road"]["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .max_attention_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["max_attention_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .max_attention_heading_diff =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["max_attention_heading_diff"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .min_valid_speed_diff =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["min_valid_speed_diff"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .max_valid_s_diff =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["max_valid_s_diff"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .max_valid_xy_diff =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["max_valid_xy_diff"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .front_view_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["front_view_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .back_view_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["back_view_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .adopt_lateral_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["adopt_lateral_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .deacc = input_json["motorway_speed_confilict_decider_config"]
                         ["diverging_road_scenario_config"]["deacc"]
                             .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .safe_thw = input_json["motorway_speed_confilict_decider_config"]
                            ["diverging_road_scenario_config"]["safe_thw"]
                                .asDouble();
  dest.motorway_speed_confilict_decider_config.diverging_road_scenario_config
      .delay_zone_length =
      input_json["motorway_speed_confilict_decider_config"]
                ["diverging_road_scenario_config"]["delay_zone_length"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .merge_in_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["merge_in_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["merge_in_road_scenario_config"]["game_params"]
                 ["merge_in_road"]["param_a"]) {
    dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
        .game_params.merge_in_road.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["merge_in_road_scenario_config"]["game_params"]
                 ["merge_in_road"]["param_c"]) {
    dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
        .game_params.merge_in_road.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["merge_in_road_scenario_config"]["game_params"]
                 ["merge_in_road"]["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
        .game_params.merge_in_road.param_margin.push_back(
            curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["merge_in_road_scenario_config"]["game_params"]
                 ["merge_in_road"]["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
        .game_params.merge_in_road.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["merge_in_road_scenario_config"]["game_params"]
                 ["merge_in_road"]["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
        .game_params.merge_in_road.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["game_params"]
                ["merge_in_road"]["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .game_params.merge_in_road.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["game_params"]
                ["merge_in_road"]["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .attention_range_positive =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["attention_range_positive"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .attention_range_nagitive =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["attention_range_nagitive"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .consider_adc_back_speed_ratio =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]
                ["consider_adc_back_speed_ratio"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .consider_adc_front_dis =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["consider_adc_front_dis"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .back_attention_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["back_attention_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .front_attention_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["front_attention_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .ego_turn_attention_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["ego_turn_attention_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .ref_line_attention_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["ref_line_attention_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.merge_in_road_scenario_config
      .front_risk_lateral_dis =
      input_json["motorway_speed_confilict_decider_config"]
                ["merge_in_road_scenario_config"]["front_risk_lateral_dis"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .turn_right_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["turn_right_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["merge"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.merge.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["merge"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.merge.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["merge"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.merge.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["merge"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.merge.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["merge"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.merge.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["game_params"]["merge"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.merge.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["game_params"]["merge"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["meeting"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.meeting.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["meeting"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.meeting.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["meeting"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.meeting.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["meeting"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.meeting.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_right_scenario_config"]["game_params"]["meeting"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
        .game_params.meeting.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["game_params"]["meeting"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .game_params.meeting.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["game_params"]["meeting"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .enable_turn_speed_limit =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["enable_turn_speed_limit"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.turn_right_scenario_config
      .turn_right_speed_limit =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_right_scenario_config"]["turn_right_speed_limit"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .turn_left_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_left_scenario_config"]["turn_left_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["merge"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.merge.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["merge"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.merge.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["merge"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.merge.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["merge"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.merge.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["merge"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.merge.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_left_scenario_config"]["game_params"]["merge"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.merge.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_left_scenario_config"]["game_params"]["merge"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["meeting"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.meeting.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["meeting"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.meeting.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["meeting"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.meeting.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["meeting"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.meeting.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["turn_left_scenario_config"]["game_params"]["meeting"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
        .game_params.meeting.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_left_scenario_config"]["game_params"]["meeting"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.turn_left_scenario_config
      .game_params.meeting.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["turn_left_scenario_config"]["game_params"]["meeting"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .straight_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["straight_scenario_config"]["straight_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["merge"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.merge.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["merge"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.merge.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["merge"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.merge.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["merge"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.merge.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["merge"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.merge.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["straight_scenario_config"]["game_params"]["merge"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.merge.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["straight_scenario_config"]["game_params"]["merge"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["meeting"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.meeting.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["meeting"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.meeting.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["meeting"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.meeting.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["meeting"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.meeting.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["straight_scenario_config"]["game_params"]["meeting"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.straight_scenario_config
        .game_params.meeting.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["straight_scenario_config"]["game_params"]["meeting"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.straight_scenario_config
      .game_params.meeting.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["straight_scenario_config"]["game_params"]["meeting"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .u_turn_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["u_turn_scenario_config"]["u_turn_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["merge"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.merge.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["merge"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.merge.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["merge"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.merge.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["merge"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.merge.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["merge"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.merge.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["u_turn_scenario_config"]["game_params"]["merge"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.merge.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["u_turn_scenario_config"]["game_params"]["merge"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["meeting"]
                 ["param_a"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.meeting.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["meeting"]
                 ["param_c"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.meeting.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["meeting"]
                 ["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.meeting.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["meeting"]
                 ["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.meeting.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["u_turn_scenario_config"]["game_params"]["meeting"]
                 ["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
        .game_params.meeting.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["u_turn_scenario_config"]["game_params"]["meeting"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.u_turn_scenario_config
      .game_params.meeting.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["u_turn_scenario_config"]["game_params"]["meeting"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .custom_conflict_enable =
      input_json["motorway_speed_confilict_decider_config"]
                ["custom_scenario_config"]["custom_conflict_enable"]
                    .asBool();
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.param_a.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_a"]) {
    dest.motorway_speed_confilict_decider_config.custom_scenario_config
        .game_params.param_a.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.param_c.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_c"]) {
    dest.motorway_speed_confilict_decider_config.custom_scenario_config
        .game_params.param_c.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.param_margin.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_margin"]) {
    dest.motorway_speed_confilict_decider_config.custom_scenario_config
        .game_params.param_margin.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.rush_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["rush_time"]) {
    dest.motorway_speed_confilict_decider_config.custom_scenario_config
        .game_params.rush_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.yield_time.clear();
  for (const auto &curr_config :
       input_json["motorway_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["yield_time"]) {
    dest.motorway_speed_confilict_decider_config.custom_scenario_config
        .game_params.yield_time.push_back(curr_config.asDouble());
  }
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.yield_advance_response_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["custom_scenario_config"]["game_params"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.motorway_speed_confilict_decider_config.custom_scenario_config
      .game_params.rush_margin_distance =
      input_json["motorway_speed_confilict_decider_config"]
                ["custom_scenario_config"]["game_params"]
                ["rush_margin_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.conflict_data.base_path
      .obs_prediction_dis =
      input_json["back_speed_confilict_decider_config"]["conflict_data"]
                ["base_path"]["obs_prediction_dis"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.conflict_data.base_path.adc_buffer =
      input_json["back_speed_confilict_decider_config"]["conflict_data"]
                ["base_path"]["adc_buffer"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .merge_in_conflict_enable =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["merge_in_conflict_enable"]
                    .asBool();
  dest.back_speed_confilict_decider_config.merge_in_config.game_params.param_a
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                 ["game_params"]["param_a"]) {
    dest.back_speed_confilict_decider_config.merge_in_config.game_params.param_a
        .push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.merge_in_config.game_params.param_c
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                 ["game_params"]["param_c"]) {
    dest.back_speed_confilict_decider_config.merge_in_config.game_params.param_c
        .push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.merge_in_config.game_params
      .param_margin.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                 ["game_params"]["param_margin"]) {
    dest.back_speed_confilict_decider_config.merge_in_config.game_params
        .param_margin.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.merge_in_config.game_params.rush_time
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                 ["game_params"]["rush_time"]) {
    dest.back_speed_confilict_decider_config.merge_in_config.game_params
        .rush_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.merge_in_config.game_params
      .yield_time.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                 ["game_params"]["yield_time"]) {
    dest.back_speed_confilict_decider_config.merge_in_config.game_params
        .yield_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.merge_in_config.game_params
      .yield_advance_response_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["game_params"]["yield_advance_response_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config.game_params
      .rush_margin_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["game_params"]["rush_margin_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .attention_range_positive =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["attention_range_positive"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .attention_range_nagitive =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["attention_range_nagitive"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .consider_adc_back_speed_ratio =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["consider_adc_back_speed_ratio"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .consider_adc_front_dis =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["consider_adc_front_dis"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .back_attention_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["back_attention_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .front_attention_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["front_attention_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .ego_turn_attention_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["ego_turn_attention_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.merge_in_config
      .ref_line_attention_distance =
      input_json["back_speed_confilict_decider_config"]["merge_in_config"]
                ["ref_line_attention_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.meeting_config
      .meeting_conflict_enable =
      input_json["back_speed_confilict_decider_config"]["meeting_config"]
                ["meeting_conflict_enable"]
                    .asBool();
  dest.back_speed_confilict_decider_config.meeting_config.game_params.param_a
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["meeting_config"]
                 ["game_params"]["param_a"]) {
    dest.back_speed_confilict_decider_config.meeting_config.game_params.param_a
        .push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.meeting_config.game_params.param_c
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["meeting_config"]
                 ["game_params"]["param_c"]) {
    dest.back_speed_confilict_decider_config.meeting_config.game_params.param_c
        .push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.meeting_config.game_params
      .param_margin.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["meeting_config"]
                 ["game_params"]["param_margin"]) {
    dest.back_speed_confilict_decider_config.meeting_config.game_params
        .param_margin.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.meeting_config.game_params.rush_time
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["meeting_config"]
                 ["game_params"]["rush_time"]) {
    dest.back_speed_confilict_decider_config.meeting_config.game_params
        .rush_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.meeting_config.game_params.yield_time
      .clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]["meeting_config"]
                 ["game_params"]["yield_time"]) {
    dest.back_speed_confilict_decider_config.meeting_config.game_params
        .yield_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.meeting_config.game_params
      .yield_advance_response_distance =
      input_json["back_speed_confilict_decider_config"]["meeting_config"]
                ["game_params"]["yield_advance_response_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.meeting_config.game_params
      .rush_margin_distance =
      input_json["back_speed_confilict_decider_config"]["meeting_config"]
                ["game_params"]["rush_margin_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.custom_scenario_config
      .custom_conflict_enable =
      input_json["back_speed_confilict_decider_config"]
                ["custom_scenario_config"]["custom_conflict_enable"]
                    .asBool();
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .param_a.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_a"]) {
    dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
        .param_a.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .param_c.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_c"]) {
    dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
        .param_c.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .param_margin.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["param_margin"]) {
    dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
        .param_margin.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .rush_time.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["rush_time"]) {
    dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
        .rush_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .yield_time.clear();
  for (const auto &curr_config :
       input_json["back_speed_confilict_decider_config"]
                 ["custom_scenario_config"]["game_params"]["yield_time"]) {
    dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
        .yield_time.push_back(curr_config.asDouble());
  }
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .yield_advance_response_distance =
      input_json["back_speed_confilict_decider_config"]
                ["custom_scenario_config"]["game_params"]
                ["yield_advance_response_distance"]
                    .asDouble();
  dest.back_speed_confilict_decider_config.custom_scenario_config.game_params
      .rush_margin_distance = input_json["back_speed_confilict_decider_config"]
                                        ["custom_scenario_config"]
                                        ["game_params"]["rush_margin_distance"]
                                            .asDouble();
  dest.level_k_decider_config.assume_max_steer =
      input_json["level_k_decider_config"]["assume_max_steer"].asDouble();
  dest.level_k_decider_config.assume_max_acc =
      input_json["level_k_decider_config"]["assume_max_acc"].asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.computation_budget =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]
                ["computation_budget"]
                    .asInt();
  dest.level_k_decider_config.monte_carlo_search_config.w_ls =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]["w_ls"]
          .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_os =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]["w_os"]
          .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_sb =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]["w_sb"]
          .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_lv =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]["w_lv"]
          .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_c =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]["w_c"]
          .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_safe =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]
                ["w_safe"]
                    .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_efficiency =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]
                ["w_efficiency"]
                    .asDouble();
  dest.level_k_decider_config.monte_carlo_search_config.w_comfort =
      input_json["level_k_decider_config"]["monte_carlo_search_config"]
                ["w_comfort"]
                    .asDouble();
  dest.multimodel_kalman_config.general.cv_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["general"]["cv_cov_q"]) {
    dest.multimodel_kalman_config.general.cv_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.general.ca_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["general"]["ca_cov_q"]) {
    dest.multimodel_kalman_config.general.ca_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.general.act_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["general"]["act_cov_q"]) {
    dest.multimodel_kalman_config.general.act_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.general.lm_cov_r.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["general"]["lm_cov_r"]) {
    dest.multimodel_kalman_config.general.lm_cov_r.push_back(
        curr_config.asInt());
  }
  dest.multimodel_kalman_config.general.nlm_cov_r.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["general"]["nlm_cov_r"]) {
    dest.multimodel_kalman_config.general.nlm_cov_r.push_back(
        curr_config.asInt());
  }
  dest.multimodel_kalman_config.x33481.cv_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["x33481"]["cv_cov_q"]) {
    dest.multimodel_kalman_config.x33481.cv_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.x33481.ca_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["x33481"]["ca_cov_q"]) {
    dest.multimodel_kalman_config.x33481.ca_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.x33481.act_cov_q.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["x33481"]["act_cov_q"]) {
    dest.multimodel_kalman_config.x33481.act_cov_q.push_back(
        curr_config.asDouble());
  }
  dest.multimodel_kalman_config.x33481.lm_cov_r.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["x33481"]["lm_cov_r"]) {
    dest.multimodel_kalman_config.x33481.lm_cov_r.push_back(
        curr_config.asInt());
  }
  dest.multimodel_kalman_config.x33481.nlm_cov_r.clear();
  for (const auto &curr_config :
       input_json["multimodel_kalman_config"]["x33481"]["nlm_cov_r"]) {
    dest.multimodel_kalman_config.x33481.nlm_cov_r.push_back(
        curr_config.asInt());
  }
}

}  // namespace config
}  // namespace planning
}  // namespace neodrive
