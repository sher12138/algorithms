/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#pragma once

#include <jsoncpp/json/json.h>
#include <string>
#include <unordered_map>
#include <vector>

namespace neodrive {
namespace planning {
namespace config {

struct AutoPlanningResearchConfig {
  bool only_for_backup_path_planner;
  bool only_for_backup_speed_planner;
  struct CameraLaneConfig {
    float junction_pre_dis;
    float bev_2d_use_length;
    float bev_2d_average_value_threshold;
    float check_heading_front_use_length;
    float check_heading_back_use_length;
    float check_heading_delta_degree;
  };
  CameraLaneConfig camera_lane_config;
  struct ReferenceLineConfig {
    struct CuriseGeneratorConfig {
      float front_extend_length;
      float back_extend_length;
      float ref_stitch_length;
    };
    CuriseGeneratorConfig curise_generator_config;
    struct SmootherConfig {
      struct FemposSmootherConfig {
        std::string smoother;
        float max_deviation;
        float piecewise_length;
        int max_iteration;
        float opt_tol;
        float opt_acceptable_tol;
        int opt_acceptable_iteration;
        float weight_curve_length;
        float weight_kappa;
        float weight_dkappa;
        float longitudinal_boundary_bound;
        float lateral_boundary_bound;
        float reference_line_point_interval;
      };
      FemposSmootherConfig fempos_smoother_config;
    };
    SmootherConfig smoother_config;
  };
  ReferenceLineConfig reference_line_config;
  struct ReferenceLineSmoothConfig {
    std::string smoother;
    float max_deviation;
    float piecewise_length;
    int max_iteration;
    float opt_tol;
    float opt_acceptable_tol;
    int opt_acceptable_iteration;
    float weight_curve_length;
    float weight_kappa;
    float weight_dkappa;
    float longitudinal_boundary_bound;
    float lateral_boundary_bound;
    struct Indoor {
      bool enable_adjust_bound;
      float longitudinal_boundary_bound;
      float lateral_boundary_bound;
    };
    Indoor indoor;
    struct Motorway {
      bool enable_adjust_bound;
      float longitudinal_boundary_bound;
      float lateral_boundary_bound;
    };
    Motorway motorway;
    float reference_line_point_interval;
  };
  ReferenceLineSmoothConfig reference_line_smooth_config;
  struct SpeedWormFollow {
    float planning_step_time_;
    float acc_rate_;
    float ego_headway_;
    int default_space_;
    float worm_obs_max_speed_threshold;
    float worm_mode_check_area_length;
    float worm_mode_check_area_width_expend;
    float desire_max_a_;
    int worm_time_cycle_threshold;
    int min_stop_buffer;
    float night_market_lat_buffer;
    int worm_trajectory_points_num;
    float default_space_for_motoway;
    float worm_trigger_speed;
  };
  SpeedWormFollow speed_worm_follow;
  struct SpeedLaneChange {
    float planning_step_time_;
    float future_see_forward_length;
    float future_see_backward_length;
    float future_see_left_width;
    float future_see_right_width;
    float min_obs_speed;
    float lane_change_use_time;
    float lane_change_sample_t_s;
    float lane_change_sample_t_e;
    int iter_size_for_nonlinear_solve;
    float iter_max_threshold;
    float lane_change_ld_buffer;
    float lane_change_fd_buffer;
    float ego_ld_thw;
    float ego_fd_thw_ttw;
    float ld_ego_ttw;
    float ld_t_inf;
    float fd_t_inf;
    float ignore_ld_dis;
    float lane_change_t_adj;
    float dis_to_end_triger;
    float dis_to_set_obs;
  };
  SpeedLaneChange speed_lane_change;
  struct SpeedIterDeduction {
    float step_time;
    float back_extend_time;
    float pid_desire_max_a;
    float pid_v_set;
    float pid_p;
    float idm_p;
    float headway;
    float default_space;
    float default_space_for_virtual;
    float default_space_for_stop;
    float desire_max_a;
    float desire_max_b;
    float collision_buffer;
    bool ego_acc_triger;
    float virtual_bound_t;
    float collision_buffer_l;
    float collision_buffer_u;
    float predestrian_protection_buffer;
    float collision_convergence_thw;
    float collision_convergence_ttw;
    float collision_convergence_thw_end;
    int max_backtrack_time;
    float stop_a;
    float stop_v;
  };
  SpeedIterDeduction speed_iter_deduction;
  struct SpeedCilqr {
    float step_time;
    int max_iters;
    float max_jerk_limit;
    float min_jerk_limit;
    float min_s_limit;
    float min_v_limit;
    float max_v_limit;
    float min_a_limit;
    float max_a_limit;
    float q1_jerk;
    float q2_jerk;
    float q1_s;
    float q2_s;
    float q1_s_obs;
    float q2_s_obs;
    float q1_v;
    float q2_v;
    float q1_a;
    float q2_a;
    float control_cost;
    float state_s_cost;
    float state_v_cost;
    float state_a_cost;
  };
  SpeedCilqr speed_cilqr;
  struct SpeedReversedRepulsiveFieldCaution {
    float planning_step_time_;
    float acc_change_rate_;
    float filed_check_area_length;
    float lane_bound_left_expend_buffer;
    float lane_bound_right_expend_buffer;
    float speed_reverse_heading_diff_min;
    int reverse_trajectory_max_point_num;
    float repulsive_para;
    float deduction_para;
    float act_time;
    float a_ego_acc;
    float a_obs_acc;
    float a_ego_brake;
    float a_obs_brake;
  };
  SpeedReversedRepulsiveFieldCaution speed_reversed_repulsive_field_caution;
  struct ControlTuningConfig {
    struct ControlSpeedTuning {
      int test_mode;
      float start_t;
      float max_v;
      float min_v;
      int delta_t;
    };
    ControlSpeedTuning control_speed_tuning;
    struct ControlPathTuning {
      float length_1;
      float curv_1;
      float length_2;
      float curv_2;
      float length_3;
      float curv_3;
      float road_width;
    };
    ControlPathTuning control_path_tuning;
  };
  ControlTuningConfig control_tuning_config;
  struct TrafficLightLawConfig {
    bool active_protect;
    bool enable_second_stop_line_protect;
    float active_protect_dis;
    float behind_active_protect_min_time;
    float forward_active_protect_min_time;
  };
  TrafficLightLawConfig traffic_light_law_config;
  struct TrafficLightYLawConfig {
    bool enable_traffic_light_y;
  };
  TrafficLightYLawConfig traffic_light_y_law_config;
  struct RestrictedAreaLawConfig {
    bool enable_restricted_area;
  };
  RestrictedAreaLawConfig restricted_area_law_config;
  struct CreateVirtualObsDeciderConfig {};
  CreateVirtualObsDeciderConfig create_virtual_obs_decider_config;
  struct LaneBorrowSpeedDeciderConfig {
    bool ignore_reversed_obs;
    float longi_safe_dis;
    float longi_size_dis_ratio;
    float lat_safe_dis;
    float lat_size_dis_ratio;
    float back_attention_ratio;
    float next_attention_ego_enlarge_ratio;
    int next_front_attention_length;
    int next_back_attention_length;
    float dynamic_forward_obs_prediction_max_time;
    float dynamic_reverse_obs_prediction_max_time;
    float ttc;
    float thw;
    float obs_length_enlarge;
    float obs_width_enlarge;
  };
  LaneBorrowSpeedDeciderConfig lane_borrow_speed_decider_config;
  struct PathRegionSearchConfig {
    bool enable_create_virtual_obs;
    float predict_time;
    float delta_a;
  };
  PathRegionSearchConfig path_region_search_config;
  struct PathDynamicObstacleDeciderConfig {};
  PathDynamicObstacleDeciderConfig path_dynamic_obstacle_decider_config;
  struct PathLaneBoundaryDeciderConfig {};
  PathLaneBoundaryDeciderConfig path_lane_boundary_decider_config;
  struct PathObsPreDecisionDeciderConfig {};
  PathObsPreDecisionDeciderConfig path_obs_pre_decision_decider_config;
  struct PathObserveRefDeciderConfig {
    bool enable_lane_borrow;
    bool enable_follow_obs;
    bool enable_reverse_obs;
    float front_junction_distance;
    float has_road_bound_max_width;
    float lane_turn_preview_distance;
    float vhe_v_filter_ratio;
    float filter_vhe_v_threshold;
    struct RangesPartition {
      float single_road_check_dis;
      float front_longitudinal_range;
      float front_lateral_range;
      float left_right_front_range;
      float left_right_back_range;
      float left_right_lateral_range;
    };
    RangesPartition ranges_partition;
    struct Force {};
    Force force;
    struct LaneBorrow {
      float lane_borrow_front_attention_dis;
      float lane_borrow_back_attention_dis;
      float dynamic_obs_lateral_attention_dis;
      float lane_borrow_attention_dynamic_speed;
      float dynamic_obs_heading_diff;
      float lane_borrow_observe_l_filter_ratio;
      float lane_borrow_width_threshold;
      float lane_borrow_observe_l_safe_width;
    };
    LaneBorrow lane_borrow;
    struct FollowObs {
      float front_safe_dis;
      float back_safe_dis;
      float lateral_safe_dis;
      float lateral_ratio;
      float max_lateral_change_l;
      float lateral_min_dis;
      float min_road_dis;
    };
    FollowObs follow_obs;
    struct ReverseObs {
      float front_safe_dis;
      float back_safe_dis;
      float lateral_safe_dis;
      int trigger_valid_dis;
      float lateral_ratio;
      float max_lateral_change_l;
      float lateral_min_dis;
      float min_road_dis;
    };
    ReverseObs reverse_obs;
    struct DangerRange {
      float front_dis;
      float back_dis;
      float left_dis;
      float right_dis;
    };
    DangerRange danger_range;
    float observe_front_dis;
    float observe_back_dis;
    float observe_left_dis;
    float observe_right_dis;
    float observe_low_speed;
    float observe_high_speed;
    float veh_pre_min_v;
    float veh_pre_add_v;
    float filter_obs_heading_threshold;
    float use_reference_heading_threshold;
    float reference_heading_ratio;
    float min_len;
    float max_len;
    float min_wid;
    float max_wid;
    float predict_total_time;
    bool use_prev_trajectory;
    int observe_obs_num;
    float extend_buff;
    float virtual_width;
  };
  PathObserveRefDeciderConfig path_observe_ref_decider_config;
  struct PathAttentionRegionDeciderConfig {
    float attention_front_dis;
    float attention_back_dis;
    float attention_left_dis;
    float attention_right_dis;
    float min_len;
    float max_len;
    float min_wid;
    float max_wid;
    float predict_time;
    float observe_limit_speed;
    float filter_obs_heading_threshold;
    float vel_heading_filter_ratio;
    int obs_maintaince_cnt;
  };
  PathAttentionRegionDeciderConfig path_attention_region_decider_config;
  struct SpeedDynamicObsPreDecisionDeciderConfig {};
  SpeedDynamicObsPreDecisionDeciderConfig
      speed_dynamic_obs_pre_decision_decider_config;
  struct SpeedCrossObsDeciderConfig {};
  SpeedCrossObsDeciderConfig speed_cross_obs_decider_config;
  struct SpeedLimitProtectionDeciderConfig {};
  SpeedLimitProtectionDeciderConfig speed_limit_protection_decider_config;
  struct SpeedSlowDownDeciderConfig {
    float curb_check_distance;
  };
  SpeedSlowDownDeciderConfig speed_slow_down_decider_config;
  struct CollisionRiskCheck {
    float front_area_s_length;
    float front_area_t_length;
    float front_area_l_buffer;
    float front_deceleration;
    float front_heading_diff_threshold;
    float front_safe_ttc_threshold;
    float back_area_s_length;
    float back_area_l_buffer;
    float side_area_l_width;
    float side_heading_diff_threshold;
    float side_vehicle_safe_l_dis;
    float side_deceleration;
    float side_l_speed_limit_ratio;
    float side_obs_speed_filter_ratio;
    float speed_limit_ratio;
    float obs_l_dis_filter_ratio;
    float obs_overtake_dis_threshold;
    float obs_turning_threshold;
    int info_size_relative_s;
    int info_size_cutin;
    int info_size_heading;
  };
  CollisionRiskCheck collision_risk_check;
  struct ObsOvertakeTurnRight {
    float check_area_front_length;
    float check_area_back_length;
    float check_area_width;
    float obs_turning_threshold;
    float obs_max_buffer_ratio;
    float l_dis_limit_speed_ratio;
    int info_size_relative_s;
    int info_size_heading;
    float default_deceleration;
  };
  ObsOvertakeTurnRight obs_overtake_turn_right;
  struct ObsParallelRisk {
    int history_info_size;
    float lat_dis_shrink_buffer;
    float default_deceleration;
    int lat_close_min_cycle;
    int parallel_min_cycle;
    float yield_min_peed;
  };
  ObsParallelRisk obs_parallel_risk;
  struct SpeedUnprotectedTurnDeciderConfig {
    float kappa_sign;
    float t;
    float lower_distance_buffer;
    int max_front_distance;
    float min_curvachange;
  };
  SpeedUnprotectedTurnDeciderConfig speed_unprotected_turn_decider_config;
  struct SpeedVehicleMergingDeciderConfig {
    float obs_prediction_dis;
    float merging_safe_dis;
    float merging_safe_ttc;
    float merging_adc_buffer;
    float limit_max_deceleration;
    float consider_adc_front_dis;
    float consider_adc_back_speed_ratio;
    float all_delay_time;
    float safe_limit_config_distance;
    float attention_max_accumulate_s;
    float ego_lane_obs_ignore_by_straight_valid_range;
    float ego_lane_obs_ignore_by_straight_valid_time_length;
  };
  SpeedVehicleMergingDeciderConfig speed_vehicle_merging_decider_config;
  struct SpeedVehicleBackCipvDeciderConfig {
    float static_game_theory_a;
    float static_game_theory_c;
    float static_game_theory_margin;
    float rush_velocity_increment;
    float agent_filter_far_end;
    float agent_filter_near_end;
    float agent_filter_rush_far_end;
    float vehicle_param_max_lonacc;
    float vehicle_param_max_lonbrake;
    float vehicle_param_max_latacc;
    float conflict_area_integration_gap;
    float speed_back_pedestrain_pre_time;
    float special_t_upper;
    float constant_mergein_acc_base_map;
  };
  SpeedVehicleBackCipvDeciderConfig speed_vehicle_back_cipv_decider_config;
  struct SpeedStaticObsPreDecisionDeciderConfig {
    float static_obs_width_handle_ratio;
  };
  SpeedStaticObsPreDecisionDeciderConfig
      speed_static_obs_pre_decision_decider_config;
  struct SpeedVirtualObsPreDecisionDeciderConfig {};
  SpeedVirtualObsPreDecisionDeciderConfig
      speed_virtual_obs_pre_decision_decider_config;
  struct VehicleMeetingDeciderConfig {};
  VehicleMeetingDeciderConfig vehicle_meeting_decider_config;
  struct SpeedStartSideBySideDeciderConfig {
    float check_area_width;
    float check_area_front_buffer;
    float check_area_back_buffer;
    float risk_obs_judge_size;
    int static_obs_wait_cycle;
  };
  SpeedStartSideBySideDeciderConfig speed_start_side_by_side_decider_config;
  struct SpeedStopToGiveWayDeciderConfig {
    float check_area_width;
    float check_area_front_buffer;
    float check_area_back_buffer;
    float give_way_width;
    float give_way_front_buffer;
    float give_way_back_buffer;
    float risk_obs_min_size;
    int history_info_size;
    int static_obs_wait_cycle;
    float obs_turning_threshold;
  };
  SpeedStopToGiveWayDeciderConfig speed_stop_to_give_way_decider_config;
  struct SpeedStopToGoFreespaceDeciderConfig {
    float freespace_check_dis;
    float adc_speed_threshold;
    int obs_keep_cnt;
    int request_sd_cnt;
  };
  SpeedStopToGoFreespaceDeciderConfig speed_stop_to_go_freespace_decider_config;
  struct SpeedPerceptionObstacleCautionDeciderConfig {
    float adc_enlarge_buffer;
    float static_obs_slow_down_buffer;
    float slow_down_target_speed;
    float all_delay_time;
    float limit_max_deceleration;
  };
  SpeedPerceptionObstacleCautionDeciderConfig
      speed_perception_obstacle_caution_decider_config;
  struct SpeedKappaLimitSpeedConfig {
    float check_kappa_min_time;
    float check_kappa_min_dis;
    std::vector<float> kappa_list;
    std::vector<float> speed_limit_list;
  };
  SpeedKappaLimitSpeedConfig speed_kappa_limit_speed_config;
  struct SpeedGhostFlashDeciderConfig {
    bool only_consider_cross_road;
    float check_area_length;
    float check_area_time;
    float check_area_width;
    float obs_buffer;
    float dynamic_obs_safe_dis;
    float dynamic_obs_speed_threshold;
    float limit_max_deceleration;
    float limit_min_speed_ratio;
    float all_delay_time;
    int closer_cnt_threshold;
    float lat_attention_dis;
    std::vector<float> lat_dis_list;
    std::vector<float> speed_limit_list;
  };
  SpeedGhostFlashDeciderConfig speed_ghost_flash_decider_config;
  struct SpeedVehicleMeetingDecider {};
  SpeedVehicleMeetingDecider speed_vehicle_meeting_decider;
  struct SpeedPredictionPreDecisionDeciderConfig {
    float obs_adc_reverse_heading_diff;
    float obs_path_reverse_heading_diff;
    float obs_adc_vertical_heading_diff_delta;
    float obs_path_heading_diff;
    float obs_adc_safe_dis_cross_road;
    float obs_adc_safe_dis_straight;
    float obs_path_safe_dis;
    float obs_lower_point_mis_s;
    float obs_to_adc_front_edge_delta;
    bool right_consider;
    float reverse_heading_diff;
  };
  SpeedPredictionPreDecisionDeciderConfig
      speed_prediction_pre_decision_decider_config;
  struct SpeedPedestrainProtectDeciderConfig {
    float long_check_dis;
    float long_check_time;
    int history_data_size;
    float lat_dis_speed_ratio;
    float min_speed_limit;
    float tan_threshold;
  };
  SpeedPedestrainProtectDeciderConfig speed_pedestrain_protect_decider_config;
  struct DpStGraphConfig {
    struct DpStConfig {
      float total_path_length;
      int matrix_dimension_s;
      int matrix_dimension_t;
      float max_speed_tolerance;
      float init_speed_tolerance;
      float speed_weight;
      float accel_weight;
      float jerk_weight;
      float reference_weight;
      float obstacle_weight;
      float st_graph_default_point_cost;
      float st_graph_nudge_default_cost;
      float obstacle_damp_factor;
      float expected_distance_slack_factor;
      float nudge_max_lateral_distance;
      float nudge_minimal_speed;
      float nudge_distance_coeff;
      float obstacle_distance_coeff;
      float exceed_speed_penalty;
      float low_speed_penalty;
      float accel_penalty;
      float decel_penalty;
      float positive_jerk_coeff;
      float negative_jerk_coeff;
      float exceed_jerk_penalty;
    };
    DpStConfig dp_st_config;
    struct StBoundaryConfig {
      float boundary_buffer;
      float minimal_follow_time;
      float minimal_yield_time;
      float kappa_threshold;
      float lowest_speed;
      float default_characteristic_length;
      float nudge_lon_expand_dis;
      float nudge_lat_expand_dis;
      float static_obs_park_stop_dis;
      float static_obs_uturn_stop_dis;
      float virtual_obs_stop_dis;
      float max_decel_for_converse_obs;
      float dynamic_obs_st_boundary_buffer;
      float dynamic_obs_st_boundary_yeild_buffer;
      float dynamic_obs_st_boundary_overtake_buffer;
      float dynamic_obs_use_polygon_dis_threshold;
    };
    StBoundaryConfig st_boundary_config;
  };
  DpStGraphConfig dp_st_graph_config;
  struct ThirdOrderSplineSpeedOptimizerConfig {
    float weight_stop_s;
    float weight_stop_v;
    float weight_follow_s;
    float weight_follow_v;
    float weight_yield_s;
    float weight_yield_v;
    float weight_overtake_s;
    float weight_overtake_v;
    float weight_cruise_s;
    float weight_cruise_v;
    float weight_a;
    float weight_jerk;
    float weight_slack;
    float weight_hard_brake_s;
    float weight_hard_brake_v;
    float weight_hard_brake_a;
  };
  ThirdOrderSplineSpeedOptimizerConfig
      third_order_spline_speed_optimizer_config;
  struct MincoPathOptimizerConfig {
    float wei_obs;
    float wei_shrink;
    float wei_match;
    float wei_vel;
    float wei_acc;
    float wei_latacc;
    float wei_cur;
    float wei_phidot;
    float wei_time;
    float max_vel;
    float max_acc;
    float max_latacc;
    float max_cur;
    float max_phidot;
    float grid_step;
    float lateral_safe_dis;
    float longi_safe_dis;
    float virtual_interval;
    int min_piece_nums;
    float min_speed;
    float sample_s;
    float reparam_sample_s;
    int piece_cut_nums;
  };
  MincoPathOptimizerConfig minco_path_optimizer_config;
  struct MpcVelocityPlanOptimizerConfig {
    float weight_s;
    float weight_v;
    float weight_a;
    float weight_jerk;
    float weight_slack;
    float traffic_light_stop_dis;
    float static_obs_stop_dis;
    float destination_stop_dis;
    float follow_delta_l_threshold;
    float follow_delta_s_threshold;
    float follow_delta_t_threshold;
    float follow_ego_min_speed;
    float follow_heading_diff_threshold;
    float dynamic_obs_collide_s_buffer;
    float static_obs_collide_s_buffer;
    float dynamic_obs_boundary_buffer;
    float reverse_obs_boundary_buffer;
    float collide_judge_max_time;
    float collide_judge_time_resolution;
    float merge_back_min_distance_threshold;
    float merge_back_thw_threshold;
    float merge_back_ttc_threshold;
    float max_acc;
    float min_acc;
    float soft_acc_plus;
    float soft_acc_minus;
    float max_jerk;
    float min_jerk;
  };
  MpcVelocityPlanOptimizerConfig mpc_velocity_plan_optimizer_config;
  struct BackupSpeedOptimizerConfig {
    float static_min_a;
    float sample_max_a;
    float indoor_min_a;
    float sample_min_a;
    float sample_step;
    float sanity_check_cal_s_by_a;
  };
  BackupSpeedOptimizerConfig backup_speed_optimizer_config;
  struct GeoSpeedOptimizerConfig {
    float ttc;
  };
  GeoSpeedOptimizerConfig geo_speed_optimizer_config;
  struct PathRoadGraphConfig {
    struct PathRegion {};
    PathRegion path_region;
    struct PathGoalSl {
      int obs_add_index;
      int road_add_index;
      int max_lateral_sample_size;
      float interval_l;
      float ref_cost;
      float lateral_static_obs_dis;
      float lateral_static_obs_cost;
      float lateral_dis_ratio;
      float lon_static_obs_dis;
      float car_box_lon_buffer;
      float car_box_lateral_buffer;
      float lon_static_obs_cost;
      float road_dis;
      float road_cost;
      float lane_dis;
      float lane_cost;
      float dynamic_obs_lowpass_filter_ratio;
      int dynamic_obs_init_cnt;
      int dynamic_obs_reduce_cnt;
      int dynamic_obs_count;
      float dynamic_obs_dis;
      float dynamic_obs_cost;
      float history_path_cost;
      float history_path_min_dis;
      float smooth_cost;
    };
    PathGoalSl path_goal_sl;
    struct PathShrink {
      float min_shrink_dis;
      float kappa_length;
    };
    PathShrink path_shrink;
    float road_extend_dis;
  };
  PathRoadGraphConfig path_road_graph_config;
  struct ThirdOrderSplinePathOptimizerConfig {
    float weight_l0;
    float weight_dl;
    float weight_ddl;
    float weight_l1;
    float weight_l2;
    float weight_dddl;
    float weight_slack_dl;
    float weight_slack_ddl;
    float weight_slack_l1;
    float weight_slack_l2;
    bool init_test_fix_flag;
    float init_test_current_speed_thersh;
    float init_test_delta_kappa_thersh;
  };
  ThirdOrderSplinePathOptimizerConfig third_order_spline_path_optimizer_config;
  struct PathBackupOptimizerConfig {
    float weight_l;
    float weight_dl;
    float weight_ddl;
    float weight_dddl;
  };
  PathBackupOptimizerConfig path_backup_optimizer_config;
  struct MotorwaySpeedConfilictDeciderConfig {
    struct ConflictData {
      struct BasePath {
        float obs_prediction_dis;
        float adc_buffer;
      };
      BasePath base_path;
      struct BaseMap {};
      BaseMap base_map;
    };
    ConflictData conflict_data;
    struct DivergingRoadScenarioConfig {
      bool diverging_conflict_enable;
      struct GameParams {
        struct DivergingRoad {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        DivergingRoad diverging_road;
      };
      GameParams game_params;
      float max_attention_distance;
      float max_attention_heading_diff;
      float min_valid_speed_diff;
      float max_valid_s_diff;
      float max_valid_xy_diff;
      float front_view_distance;
      float back_view_distance;
      float adopt_lateral_distance;
      float deacc;
      float safe_thw;
      float delay_zone_length;
    };
    DivergingRoadScenarioConfig diverging_road_scenario_config;
    struct MergeInRoadScenarioConfig {
      bool merge_in_conflict_enable;
      struct GameParams {
        struct MergeInRoad {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        MergeInRoad merge_in_road;
      };
      GameParams game_params;
      float attention_range_positive;
      float attention_range_nagitive;
      float consider_adc_back_speed_ratio;
      float consider_adc_front_dis;
      float back_attention_distance;
      float front_attention_distance;
      float ego_turn_attention_distance;
      float ref_line_attention_distance;
      float front_risk_lateral_dis;
    };
    MergeInRoadScenarioConfig merge_in_road_scenario_config;
    struct TurnRightScenarioConfig {
      bool turn_right_conflict_enable;
      struct GameParams {
        struct Merge {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Merge merge;
        struct Meeting {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Meeting meeting;
      };
      GameParams game_params;
      bool enable_turn_speed_limit;
      float turn_right_speed_limit;
    };
    TurnRightScenarioConfig turn_right_scenario_config;
    struct TurnLeftScenarioConfig {
      bool turn_left_conflict_enable;
      struct GameParams {
        struct Merge {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Merge merge;
        struct Meeting {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Meeting meeting;
      };
      GameParams game_params;
    };
    TurnLeftScenarioConfig turn_left_scenario_config;
    struct StraightScenarioConfig {
      bool straight_conflict_enable;
      struct GameParams {
        struct Merge {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Merge merge;
        struct Meeting {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Meeting meeting;
      };
      GameParams game_params;
    };
    StraightScenarioConfig straight_scenario_config;
    struct UTurnScenarioConfig {
      bool u_turn_conflict_enable;
      struct GameParams {
        struct Merge {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Merge merge;
        struct Meeting {
          std::vector<float> param_a;
          std::vector<float> param_c;
          std::vector<float> param_margin;
          std::vector<float> rush_time;
          std::vector<float> yield_time;
          float yield_advance_response_distance;
          float rush_margin_distance;
        };
        Meeting meeting;
      };
      GameParams game_params;
    };
    UTurnScenarioConfig u_turn_scenario_config;
    struct CustomScenarioConfig {
      bool custom_conflict_enable;
      struct GameParams {
        std::vector<float> param_a;
        std::vector<float> param_c;
        std::vector<float> param_margin;
        std::vector<float> rush_time;
        std::vector<float> yield_time;
        float yield_advance_response_distance;
        float rush_margin_distance;
      };
      GameParams game_params;
    };
    CustomScenarioConfig custom_scenario_config;
  };
  MotorwaySpeedConfilictDeciderConfig motorway_speed_confilict_decider_config;
  struct BackSpeedConfilictDeciderConfig {
    struct ConflictData {
      struct BasePath {
        float obs_prediction_dis;
        float adc_buffer;
      };
      BasePath base_path;
      struct BaseMap {};
      BaseMap base_map;
    };
    ConflictData conflict_data;
    struct MergeInConfig {
      bool merge_in_conflict_enable;
      struct GameParams {
        std::vector<float> param_a;
        std::vector<float> param_c;
        std::vector<float> param_margin;
        std::vector<float> rush_time;
        std::vector<float> yield_time;
        float yield_advance_response_distance;
        float rush_margin_distance;
      };
      GameParams game_params;
      float attention_range_positive;
      float attention_range_nagitive;
      float consider_adc_back_speed_ratio;
      float consider_adc_front_dis;
      float back_attention_distance;
      float front_attention_distance;
      float ego_turn_attention_distance;
      float ref_line_attention_distance;
    };
    MergeInConfig merge_in_config;
    struct MeetingConfig {
      bool meeting_conflict_enable;
      struct GameParams {
        std::vector<float> param_a;
        std::vector<float> param_c;
        std::vector<float> param_margin;
        std::vector<float> rush_time;
        std::vector<float> yield_time;
        float yield_advance_response_distance;
        float rush_margin_distance;
      };
      GameParams game_params;
    };
    MeetingConfig meeting_config;
    struct CustomScenarioConfig {
      bool custom_conflict_enable;
      struct GameParams {
        std::vector<float> param_a;
        std::vector<float> param_c;
        std::vector<float> param_margin;
        std::vector<float> rush_time;
        std::vector<float> yield_time;
        float yield_advance_response_distance;
        float rush_margin_distance;
      };
      GameParams game_params;
    };
    CustomScenarioConfig custom_scenario_config;
  };
  BackSpeedConfilictDeciderConfig back_speed_confilict_decider_config;
  struct LevelKDeciderConfig {
    float assume_max_steer;
    float assume_max_acc;
    struct MonteCarloSearchConfig {
      int computation_budget;
      float w_ls;
      float w_os;
      float w_sb;
      float w_lv;
      float w_c;
      float w_safe;
      float w_efficiency;
      float w_comfort;
    };
    MonteCarloSearchConfig monte_carlo_search_config;
  };
  LevelKDeciderConfig level_k_decider_config;
  struct MultimodelKalmanConfig {
    struct General {
      std::vector<float> cv_cov_q;
      std::vector<float> ca_cov_q;
      std::vector<float> act_cov_q;
      std::vector<int> lm_cov_r;
      std::vector<int> nlm_cov_r;
    };
    General general;
    struct X33481 {
      std::vector<float> cv_cov_q;
      std::vector<float> ca_cov_q;
      std::vector<float> act_cov_q;
      std::vector<int> lm_cov_r;
      std::vector<int> nlm_cov_r;
    };
    X33481 x33481;
  };
  MultimodelKalmanConfig multimodel_kalman_config;
};

void InitAutoPlanningResearchConfig(const Json::Value &input_json,
                                    AutoPlanningResearchConfig &dest);

}  // namespace config
}  // namespace planning
}  // namespace neodrive
