/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#include "config/auto_scene_special_config.h"

namespace neodrive {
namespace planning {
namespace config {

void InitAutoSceneSpecialConfig(const Json::Value &input_json,
                                AutoSceneSpecialConfig &dest) {
  dest.in_lane_uturn.clear();
  for (const auto &config_dict : input_json["in_lane_uturn"]) {
    AutoSceneSpecialConfig::InLaneUturn curr_config{};
    curr_config.lane_id = config_dict["lane_id"].asString();
    curr_config.start_s = config_dict["start_s"].asDouble();
    curr_config.end_s = config_dict["end_s"].asDouble();
    curr_config.routing_end_lane_id =
        config_dict["routing_end_lane_id"].asString();
    curr_config.routing_end_s = config_dict["routing_end_s"].asDouble();
    curr_config.routing_end_x = config_dict["routing_end_x"].asDouble();
    curr_config.routing_end_y = config_dict["routing_end_y"].asDouble();
    curr_config.routing_end_heading =
        config_dict["routing_end_heading"].asDouble();
    dest.in_lane_uturn.insert({curr_config.lane_id, curr_config});
  }
  dest.freespace_refer_line_in.clear();
  for (const auto &config_dict : input_json["freespace_refer_line_in"]) {
    AutoSceneSpecialConfig::FreespaceReferLineIn curr_config{};
    curr_config.x = config_dict["x"].asDouble();
    curr_config.y = config_dict["y"].asDouble();
    curr_config.theta = config_dict["theta"].asDouble();
    dest.freespace_refer_line_in.emplace_back(curr_config);
  }
  dest.freespace_refer_line_out.clear();
  for (const auto &config_dict : input_json["freespace_refer_line_out"]) {
    AutoSceneSpecialConfig::FreespaceReferLineOut curr_config{};
    curr_config.x = config_dict["x"].asDouble();
    curr_config.y = config_dict["y"].asDouble();
    curr_config.theta = config_dict["theta"].asDouble();
    dest.freespace_refer_line_out.emplace_back(curr_config);
  }
  dest.bias_driving_setting.clear();
  for (const auto &config_dict : input_json["bias_driving_setting"]) {
    AutoSceneSpecialConfig::BiasDrivingSetting curr_config{};
    curr_config.lane_id = config_dict["lane_id"].asString();
    curr_config.start_s = config_dict["start_s"].asDouble();
    curr_config.end_s = config_dict["end_s"].asDouble();
    curr_config.bias_val = config_dict["bias_val"].asDouble();
    dest.bias_driving_setting.insert({curr_config.lane_id, curr_config});
  }
  dest.parking.left_parking_ids.clear();
  for (const auto &curr_config : input_json["parking"]["left_parking_ids"]) {
    dest.parking.left_parking_ids.push_back(curr_config.asString());
  }
  dest.parking.c_type_parking_ids.clear();
  for (const auto &curr_config : input_json["parking"]["c_type_parking_ids"]) {
    dest.parking.c_type_parking_ids.push_back(curr_config.asString());
  }
  dest.parking.not_parking_out_ids.clear();
  for (const auto &curr_config : input_json["parking"]["not_parking_out_ids"]) {
    dest.parking.not_parking_out_ids.push_back(curr_config.asString());
  }
  dest.parking_thresholds.clear();
  for (const auto &config_dict : input_json["parking_thresholds"]) {
    AutoSceneSpecialConfig::ParkingThresholds curr_config{};
    curr_config.id = config_dict["id"].asString();
    curr_config.dis = config_dict["dis"].asDouble();
    dest.parking_thresholds.insert({curr_config.id, curr_config});
  }
}

}  // namespace config
}  // namespace planning
}  // namespace neodrive
