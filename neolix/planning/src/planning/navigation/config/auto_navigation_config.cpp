/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#include "config/auto_navigation_config.h"

namespace neodrive {
namespace planning {
namespace config {

void InitAutoNavigationConfig(const Json::Value &input_json,
                              AutoNavigationConfig &dest) {
  dest.manual_lane_change_order =
      input_json["manual_lane_change_order"].asInt();
  dest.navigation_strategy = input_json["navigation_strategy"].asInt();
  dest.routing_period_frequency =
      input_json["routing_period_frequency"].asInt();
  dest.max_lane_change_len = input_json["max_lane_change_len"].asInt();
  dest.broadcast_result_interval =
      input_json["broadcast_result_interval"].asDouble();
  dest.left_turn_penalty = input_json["left_turn_penalty"].asDouble();
  dest.right_turn_penalty = input_json["right_turn_penalty"].asDouble();
  dest.uturn_penalty = input_json["uturn_penalty"].asDouble();
  dest.change_lane_penalty = input_json["change_lane_penalty"].asDouble();
  dest.base_change_length = input_json["base_change_length"].asDouble();
  dest.min_length_for_lane_change =
      input_json["min_length_for_lane_change"].asDouble();
  dest.base_speed = input_json["base_speed"].asDouble();
  dest.is_on_map_radius = input_json["is_on_map_radius"].asDouble();
  dest.lane_index_radius = input_json["lane_index_radius"].asDouble();
  dest.routing_service_channel =
      input_json["routing_service_channel"].asString();
  dest.cyberverse_service_channel =
      input_json["cyberverse_service_channel"].asString();
  dest.base_map_path = input_json["base_map_path"].asString();
  dest.lane_change_min_distance =
      input_json["lane_change_min_distance"].asDouble();
  dest.forbid_lane_change_distance_before_intersection =
      input_json["forbid_lane_change_distance_before_intersection"].asDouble();
  dest.max_lane_cost = input_json["max_lane_cost"].asDouble();
  dest.lane_change_cost_rate = input_json["lane_change_cost_rate"].asDouble();
  dest.dis_to_rightest_lane_cost_rate =
      input_json["dis_to_rightest_lane_cost_rate"].asDouble();
  dest.traffic_turn_light_dist =
      input_json["traffic_turn_light_dist"].asDouble();
  dest.turn_light_close_length = input_json["turn_light_close_length"].asInt();
  dest.turn_light_ahead_time = input_json["turn_light_ahead_time"].asDouble();
  dest.merge_angle_range = input_json["merge_angle_range"].asDouble();
  dest.min_merge_angle_diff = input_json["min_merge_angle_diff"].asDouble();
  dest.lane_change_wait_dist = input_json["lane_change_wait_dist"].asDouble();
  dest.bus_bay_cost = input_json["bus_bay_cost"].asDouble();
  dest.lane_type_change_cost = input_json["lane_type_change_cost"].asDouble();
  dest.merge_in_cost = input_json["merge_in_cost"].asDouble();
  dest.lane_change_cost = input_json["lane_change_cost"].asDouble();
  dest.mixed_lanechange_fail_dist =
      input_json["mixed_lanechange_fail_dist"].asDouble();
  dest.lane_change_renavi_dist =
      input_json["lane_change_renavi_dist"].asDouble();
  dest.lane_change_renavi_vel = input_json["lane_change_renavi_vel"].asDouble();
  dest.reach_station_time = input_json["reach_station_time"].asDouble();
  dest.enlarge_memory_time = input_json["enlarge_memory_time"].asDouble();
  dest.enable_renavigation = input_json["enable_renavigation"].asBool();
  dest.enable_lane_change_renavigation =
      input_json["enable_lane_change_renavigation"].asBool();
  dest.vec_angle_length = input_json["vec_angle_length"].asDouble();
  dest.max_lane_search_size = input_json["max_lane_search_size"].asInt();
  dest.lane_locate_range = input_json["lane_locate_range"].asDouble();
}

}  // namespace config
}  // namespace planning
}  // namespace neodrive
