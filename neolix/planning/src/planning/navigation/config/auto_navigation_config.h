/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#pragma once

#include <jsoncpp/json/json.h>
#include <string>
#include <unordered_map>
#include <vector>

namespace neodrive {
namespace planning {
namespace config {

struct AutoNavigationConfig {
  int manual_lane_change_order;
  int navigation_strategy;
  int routing_period_frequency;
  int max_lane_change_len;
  float broadcast_result_interval;
  float left_turn_penalty;
  float right_turn_penalty;
  float uturn_penalty;
  float change_lane_penalty;
  float base_change_length;
  float min_length_for_lane_change;
  float base_speed;
  float is_on_map_radius;
  float lane_index_radius;
  std::string routing_service_channel;
  std::string cyberverse_service_channel;
  std::string base_map_path;
  float lane_change_min_distance;
  float forbid_lane_change_distance_before_intersection;
  float max_lane_cost;
  float lane_change_cost_rate;
  float dis_to_rightest_lane_cost_rate;
  float traffic_turn_light_dist;
  int turn_light_close_length;
  float turn_light_ahead_time;
  float merge_angle_range;
  float min_merge_angle_diff;
  float lane_change_wait_dist;
  float bus_bay_cost;
  float lane_type_change_cost;
  float merge_in_cost;
  float lane_change_cost;
  float mixed_lanechange_fail_dist;
  float lane_change_renavi_dist;
  float lane_change_renavi_vel;
  float reach_station_time;
  float enlarge_memory_time;
  bool enable_renavigation;
  bool enable_lane_change_renavigation;
  float vec_angle_length;
  int max_lane_search_size;
  float lane_locate_range;
};

void InitAutoNavigationConfig(const Json::Value &input_json,
                              AutoNavigationConfig &dest);

}  // namespace config
}  // namespace planning
}  // namespace neodrive
