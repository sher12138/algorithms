/**
 * @brief this file is auto-generated by scripts/json_to_cpp.py. Do not edit!!!
 */

#pragma once

#include <jsoncpp/json/json.h>
#include <string>
#include <unordered_map>
#include <vector>

namespace neodrive {
namespace planning_rl {
namespace config {

struct AutoEgoAttribuate {
  struct Ego {
    std::string car_type;
    float ego_length;
    float ego_width;
    struct EgoCenter {
      float x;
      float y;
    };
    EgoCenter ego_center;
    float ego_speed;
    float ego_speed_lon;
    float ego_speed_lat;
    float ego_heading;
    int ego_acc;
    float ego_react_time;
    float ego_max_accel_lon;
    float ego_max_brake_lon;
    float ego_min_brake_lon;
    float ego_max_accel_lat;
    float ego_max_brake_lat;
    float ego_min_brake_lat;
    float ego_j_min;
    float ego_j_max;
    float min_lon_distance;
    float min_lat_distance;
  };
  Ego ego;
  struct AgentVehicle {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    int agent_max_brake_lon;
    int agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentVehicle agent_vehicle;
  struct AgentTruck {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    float agent_max_brake_lon;
    int agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentTruck agent_truck;
  struct AgentPedestrian {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    float agent_max_brake_lon;
    float agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentPedestrian agent_pedestrian;
  struct AgentTricycle {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    float agent_max_brake_lon;
    float agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentTricycle agent_tricycle;
  struct AgentBicycle {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    float agent_max_brake_lon;
    float agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentBicycle agent_bicycle;
  struct AgentUnmovable {
    std::string car_type;
    float agent_length;
    float agent_width;
    struct AgentCenter {
      float x;
      float y;
    };
    AgentCenter agent_center;
    float agent_speed;
    float agent_speed_lon;
    float agent_speed_lat;
    float agent_heading;
    float agent_acc;
    float agent_react_time;
    float agent_max_accel_lon;
    float agent_max_brake_lon;
    float agent_min_brake_lon;
    float agent_max_accel_lat;
    float agent_max_brake_lat;
    float agent_min_brake_lat;
    float agent_j_max;
    float agent_j_min;
    float min_lon_distance;
    float min_lat_distance;
  };
  AgentUnmovable agent_unmovable;
};

void InitAutoEgoAttribuate(const Json::Value &input_json,
                           AutoEgoAttribuate &dest);

}  // namespace config
}  // namespace planning_rl
}  // namespace neodrive
