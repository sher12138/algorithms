#include "src/planning/math/common/geometry.h"
#include "gtest/gtest.h"

namespace neodrive {
namespace planning {

namespace math {

void TestAD2(const AD2& p, const double x, const double y) {
  EXPECT_DOUBLE_EQ(p[0], x);
  EXPECT_DOUBLE_EQ(p[1], y);
}

TEST(AD2Test, Method) {
  AD2 p1{0, 0}, p2{1, 1};

  auto p3 = p1 - p2;
  TestAD2(p3, -1, -1);

  EXPECT_DOUBLE_EQ(Dot(p2, p3), -2);
  EXPECT_DOUBLE_EQ(Cross(p2, p3), 0);
  EXPECT_DOUBLE_EQ(Length(p2), std::hypot(1, 1));
}

TEST(AaBoxTest, Creation) {
  std::vector<AD2> pts{{1, 1}, {2, 2}, {5, 5}, {99, 99}};

  auto aabox = CreateAaBox(pts);
  TestAD2(aabox.lb, 1, 1);
  TestAD2(aabox.rt, 99, 99);
  TestAD2(aabox.cen, 50, 50);
}

TEST(PointTest, Creation) {
  Point p{1, 2};
  TestAD2(AD2{p.x(), p.y()}, 1, 2);
  TestAD2(p.aabox().lb, 1, 2);
  TestAD2(p.aabox().rt, 1, 2);
  TestAD2(p.aabox().cen, 1, 2);

  AD2 p1{3, 3};
  auto p2 = p1 - p;
  TestAD2(p2, 2, 1);
  auto p3 = p - p1;
  TestAD2(p3, -2, -1);
}

TEST(LineSegmentTest, Creation) {
  LineSegment l{{1, 1}, {2, 2}};

  TestAD2(l.start(), 1, 1);
  TestAD2(l.end(), 2, 2);
  TestAD2(l.aabox().lb, 1, 1);
  TestAD2(l.aabox().rt, 2, 2);
  TestAD2(l.aabox().cen, 1.5, 1.5);
}

TEST(Polyline, Creation) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  TestAD2(pl.aabox().lb, 1, 0);
  TestAD2(pl.aabox().rt, 4, 2);
  TestAD2(pl.aabox().cen, 2.5, 1);
  EXPECT_TRUE(pl.line_segs().size() == pl.points().size() - 1);
}

TEST(Polygon, Creation) {
  Polygon pg{{{1, 1}, {2, 2}, {3, 1}, {3, 0}}};

  TestAD2(pg.aabox().lb, 1, 0);
  TestAD2(pg.aabox().rt, 3, 2);
  TestAD2(pg.aabox().cen, 2, 1);
  EXPECT_EQ(pg.line_segs().size(), pg.points().size());
}

TEST(IsOverlapTest, AaBoxAabox) {
  auto b1 = CreateAaBox({{10, 10}, {20, 20}});
  auto b2 = CreateAaBox({{30, 30}, {40, 40}});
  auto b3 = CreateAaBox({{15, 15}, {40, 40}});
  auto b4 = CreateAaBox({{20 - 1e-1, 20 - 1e-1}, {40, 40}});
  auto b5 = CreateAaBox({{20 + 1e-1, 20 + 1e-1}, {40, 40}});
  auto b6 = CreateAaBox({{-10, -10}, {40, 40}});
  auto b7 = CreateAaBox({{14, 14}, {16, 16}});
  auto b8 = CreateAaBox({{0, 0}, {100, 100}});

  EXPECT_FALSE(IsOverlaped(b1, b2));
  EXPECT_TRUE(IsOverlaped(b1, b3));
  EXPECT_TRUE(IsOverlaped(b1, b4));
  EXPECT_FALSE(IsOverlaped(b1, b5));
  EXPECT_TRUE(IsOverlaped(b1, b6));
  EXPECT_TRUE(IsOverlaped(b1, b7));
  EXPECT_TRUE(IsOverlaped(b1, b8));
}

TEST(IsOverlapTest, PointPoint) {
  Point p1{1, 1};
  Point p2{1 - 1e-5, 1};
  Point p3{1 + 1e-5, 1};
  Point p4{2, 1};

  EXPECT_TRUE(IsOverlaped(p1, p2));
  EXPECT_TRUE(IsOverlaped(p1, p3));
  EXPECT_FALSE(IsOverlaped(p1, p4));
}

TEST(IsOverlapTest, PointLineSegment) {
  LineSegment l{{0, 0}, {10, 10}};

  Point p1{0, 0}, p2{0 - 1e-2, 0 - 1e-2}, p3{1, 1}, p4{0, 1};
  EXPECT_TRUE(IsOverlaped(p1, l));
  EXPECT_TRUE(!IsOverlaped(p2, l));
  EXPECT_TRUE(IsOverlaped(p3, l));
  EXPECT_TRUE(!IsOverlaped(p4, l));
}

TEST(IsOverlapTest, PointAaBox) {
  auto b = CreateAaBox({{0, 0}, {10, 10}});

  Point p1{1e-5, 1e-5}, p2{-1, 0}, p3{2, 3}, p4{5, 5}, p5{10, 10.1}, p6{11, 11};
  EXPECT_TRUE(IsOverlaped(p1, b));
  EXPECT_TRUE(!IsOverlaped(p2, b));
  EXPECT_TRUE(IsOverlaped(p3, b));
  EXPECT_TRUE(IsOverlaped(p4, b));
  EXPECT_TRUE(!IsOverlaped(p5, b));
  EXPECT_TRUE(!IsOverlaped(p6, b));
}

TEST(IsOverlapTest, PointPolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  Point p1{1, 1}, p2{2, 2}, p3{4.01, 0}, p4{2, 0}, p5{3, 1.2};
  EXPECT_TRUE(IsOverlaped(p1, pl));
  EXPECT_TRUE(IsOverlaped(p2, pl));
  EXPECT_TRUE(!IsOverlaped(p3, pl));
  EXPECT_TRUE(!IsOverlaped(p4, pl));
  EXPECT_TRUE(!IsOverlaped(p5, pl));
}

TEST(IsOverlapTest, PointPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_TRUE(IsOverlaped(Point{0, 0}, pg));
  EXPECT_TRUE(IsOverlaped(Point{2, 2}, pg));
  EXPECT_TRUE(!IsOverlaped(Point{2.1, 2}, pg));
  EXPECT_TRUE(!IsOverlaped(Point{3, 2}, pg));
  EXPECT_TRUE(IsOverlaped(Point{4, 4}, pg));

  Polygon pg1{{{7, 2}, {8, 2}, {8, 3}, {7, 3}}};
  EXPECT_TRUE(IsOverlaped(Point{7, 2}, pg1));
}

TEST(IsOverlapTest, LineSegmentLineSegment) {
  LineSegment l{{0, 0}, {10, 10}};
  LineSegment l1{{0, 0}, {-10, -10}}, l2{{10, 0}, {0, 10}}, l3{{10, 0}, {6, 6}};
  LineSegment l4{{20, 0}, {30, 30}}, l5{{5, 0}, {10, 0}};

  EXPECT_TRUE(IsOverlaped(l, l1));
  EXPECT_TRUE(IsOverlaped(l, l2));
  EXPECT_TRUE(IsOverlaped(l, l3));
  EXPECT_TRUE(!IsOverlaped(l, l4));
  EXPECT_TRUE(!IsOverlaped(l, l5));
}

TEST(IsOverlapTest, LineSegmentPolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  {
    LineSegment l{{2, 1}, {1, 2}};
    EXPECT_TRUE(IsOverlaped(l, pl));
  }
  {
    LineSegment l{{-1, -1}, {10, -2}};
    EXPECT_TRUE(!IsOverlaped(l, pl));
  }
  {
    LineSegment l{{3, -10}, {3, 10}};
    EXPECT_TRUE(IsOverlaped(l, pl));
  }
  {
    LineSegment l{{1, -1}, {4, 4}};
    EXPECT_TRUE(IsOverlaped(l, pl));
  }
  {
    LineSegment l{{1, 1}, {4, 1}};
    EXPECT_TRUE(IsOverlaped(l, pl));
  }
}

TEST(IsOverlapTest, LineSegmentPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_TRUE(IsOverlaped(LineSegment{{0, 0}, {2, 2}}, pg));
  EXPECT_TRUE(!IsOverlaped(LineSegment{{0.1, -0.1}, {2, -0.1}}, pg));
  EXPECT_TRUE(IsOverlaped(LineSegment{{-1, 1}, {2, 5}}, pg));
  EXPECT_TRUE(!IsOverlaped(LineSegment{{2.1, 2}, {4, 2}}, pg));
  EXPECT_TRUE(IsOverlaped(LineSegment{{3, 5}, {3, -1}}, pg));
  EXPECT_TRUE(!IsOverlaped(LineSegment{{100, 100}, {200, 100}}, pg));
}

TEST(IsOverlapTest, PolylinePolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  EXPECT_TRUE(IsOverlaped(Polyline{{{1, 1}, {0, 0}}}, pl));
  EXPECT_TRUE(IsOverlaped(Polyline{{{3, 1}, {0, 0}}}, pl));
  EXPECT_TRUE(IsOverlaped(Polyline{{{3, 2}, {0, 0}}}, pl));
  EXPECT_TRUE(!IsOverlaped(Polyline{{{1, 2}, {0, 0}}}, pl));
}

TEST(IsOverlapTest, PolylinePolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_TRUE(IsOverlaped(Polyline{{{0, 0}, {2, 2}}}, pg));
  EXPECT_TRUE(!IsOverlaped(Polyline{{{0.1, -0.1}, {2, -0.1}}}, pg));
  EXPECT_TRUE(IsOverlaped(Polyline{{{-1, 1}, {2, 5}}}, pg));
  EXPECT_TRUE(!IsOverlaped(Polyline{{{2.1, 2}, {4, 2}}}, pg));
  EXPECT_TRUE(IsOverlaped(Polyline{{{3, 5}, {3, -1}}}, pg));
  EXPECT_TRUE(!IsOverlaped(Polyline{{{100, 100}, {200, 100}}}, pg));

  Polygon pg1{{{1, 1}, {2, 1}, {2, 2}, {1, 2}}};
  EXPECT_TRUE(IsOverlaped(Polygon{{{0, 0}, {8, 0}, {8, 4}, {0, 4}}}, pg1));
}

TEST(IsOverlapTest, PolygonPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_TRUE(IsOverlaped(Polygon{{{0, 0}, {2, 0}, {2, 2}, {0, 2}}}, pg));
  EXPECT_TRUE(IsOverlaped(Polygon{{{0, 0}, {1, 0}, {1, 1}, {0, 1}}}, pg));
  EXPECT_TRUE(
      !IsOverlaped(Polygon{{{-5, -5}, {-5, -1}, {-1, -1}, {-1, -5}}}, pg));
}

TEST(DistanceTest, PointPoint) {
  EXPECT_DOUBLE_EQ(Distance(Point{0, 0}, Point{1, 0}), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{0, 0}, Point{0, 1}), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{1, 1}, Point{2, 2}), std::hypot(1, 1));
}

TEST(DistanceTest, PointLineSegment) {
  LineSegment l{{0, 0}, {10, 0}};
  EXPECT_DOUBLE_EQ(Distance(Point{0, 5}, l), 5);
  EXPECT_DOUBLE_EQ(Distance(Point{1, 5}, l), 5);
  EXPECT_DOUBLE_EQ(Distance(Point{10, 5}, l), 5);
  EXPECT_DOUBLE_EQ(Distance(Point{-5, 0}, l), 5);
  EXPECT_DOUBLE_EQ(Distance(Point{0, 0}, l), 0);
}

TEST(DistanceTest, PointPolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  EXPECT_DOUBLE_EQ(Distance(Point{1, 0}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{0, 1}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{5, 0}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{3, -1}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{2, 3}, pl), 1);
}

TEST(DistanceTest, PointPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_DOUBLE_EQ(Distance(Point{1, 1}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Point{2, 2}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Point{4, 4}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Point{4, 2}, pg), std::hypot(1, 1));
  EXPECT_DOUBLE_EQ(Distance(Point{5, 0}, pg), 1);
  EXPECT_DOUBLE_EQ(Distance(Point{-5, 0}, pg), 5);
}

TEST(DistanceTest, LineSegmentLineSegment) {
  LineSegment l{{0, 0}, {10, 0}};

  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {10, 0}}, l), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 10}, {10, 10}}, l), 10);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {-10, 0}}, l), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{5, -5}, {5, 5}}, l), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{-5, 0}, {-5, 5}}, l), 5);
}

TEST(DistanceTest, LineSegmentPolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {10, 0}}, pl), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {1, 1}}, pl), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {0, 1}}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{5, 0}, {6, 0}}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{4, 1}, {5, 1}}, pl), 1);
}

TEST(DistanceTest, LineSegmentPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_DOUBLE_EQ(Distance(LineSegment{{0, 0}, {2, 2}}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{-1, 1}, {-1, 5}}, pg), 1);
  EXPECT_DOUBLE_EQ(Distance(LineSegment{{4, 2}, {6, 2}}, pg), std::hypot(1, 1));
}

TEST(DistanceTest, PolylinePolyline) {
  Polyline pl{{{1, 1}, {2, 2}, {3, 1}, {3, 0}, {4, 0}}};

  EXPECT_DOUBLE_EQ(Distance(Polyline{{{0, 0}, {10, 0}}}, pl), 0);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{0, 0}, {1, 1}}}, pl), 0);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{0, 0}, {0, 1}}}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{5, 0}, {6, 0}}}, pl), 1);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{4, 1}, {5, 1}}}, pl), 1);
}

TEST(DistanceTest, PolylinePolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_DOUBLE_EQ(Distance(Polyline{{{0, 0}, {2, 2}}}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{-1, 1}, {-1, 5}}}, pg), 1);
  EXPECT_DOUBLE_EQ(Distance(Polyline{{{4, 2}, {6, 2}}}, pg), std::hypot(1, 1));
}

TEST(DistanceTest, PolygonPolygon) {
  Polygon pg{{{0, 0}, {4, 0}, {2, 2}, {4, 4}, {0, 4}}};

  EXPECT_DOUBLE_EQ(Distance(Polygon{{{0, 0}, {2, 0}, {2, 2}, {0, 2}}}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Polygon{{{0, 0}, {1, 0}, {1, 1}, {0, 1}}}, pg), 0);
  EXPECT_DOUBLE_EQ(Distance(Polygon{{{5, 0}, {6, 0}, {6, 1}, {5, 1}}}, pg), 1);
}

TEST(add_IsOverlapTest, PolygonPolygon_inclusionNembeded) {
  Polygon pg{{{0, 4}, {4, 0}, {0, -4}, {-4, 0}}};

  EXPECT_TRUE(IsOverlaped(Polygon{{{2, 2}, {2, -2}, {-2, -2}, {-2, 2}}}, pg));
  EXPECT_TRUE(IsOverlaped(Polygon{{{1, 1}, {1, -1}, {-1, -1}, {-1, 1}}}, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_inclusion_orin) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-17.8999999999999986, 13.3053190459079715},
               {-17.9325096549796186, 13.5001387274307820},
               {-18.0265156943621641, 13.6738466735217727},
               {-18.1718311051265431, 13.8076189328654895},
               {-18.3527087077155215, 13.8869592054715696},
               {-18.5495476072834009, 13.9032697417119735},
               {-18.7410172547917817, 13.8547830419010065},
               {-18.9063689429754440, 13.7467533923118506},
               {-19.0276842507238939, 13.5908874817302152},
               {-19.0918167820416329, 13.4040758000764129},
               {-19.0918167820416329, 13.2065622917395302},
               {-19.0276842507238939, 13.0197506100857279},
               {-18.9063689429754440, 12.8638846995040925},
               {-18.7410172547917817, 12.7558550499149366},
               {-18.5495476072834009, 12.7073683501039696},
               {-18.3527087077155215, 12.7236788863443735},
               {-18.1718311051265431, 12.8030191589504536},
               {-18.0265156943621641, 12.9367914182941703},
               {-17.9325096549796186, 13.1104993643851611}}};
  Circle cr{{-18.5, 13.3053190459079715}, 0.6};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(tar, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_inclusion_dev) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-17.8999999999999986, 13.3053190459079715},
               {-17.9325096549796186, 13.5001387274307820},
               {-18.0265156943621641, 13.6738466735217727},
               {-18.1718311051265431, 13.8076189328654895},
               {-18.3527087077155215, 13.8869592054715696},
               {-18.5495476072834009, 13.9032697417119735},
               {-18.7410172547917817, 13.8547830419010065},
               {-18.9063689429754440, 13.7467533923118506},
               {-19.0276842507238939, 13.5908874817302152},
               {-19.0918167820416329, 13.4040758000764129},
               {-19.0918167820416329, 13.2065622917395302},
               {-19.0276842507238939, 13.0197506100857279},
               {-18.9063689429754440, 12.8638846995040925},
               {-18.7410172547917817, 12.7558550499149366},
               {-18.5495476072834009, 12.7073683501039696},
               {-18.3527087077155215, 12.7236788863443735},
               {-18.1718311051265431, 12.8030191589504536},
               {-18.0265156943621641, 12.9367914182941703},
               {-17.9325096549796186, 13.1104993643851611}}};
  Circle cr{{-18.5, 13.3053190459079715}, 0.6};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(cr, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap_orin) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-14.0000000000000000, 13.3053190459079715},
               {-14.2438224123471429, 14.7664666573290475},
               {-14.9488677077162286, 16.0692762530114770},
               {-16.0387332884490803, 17.0725681980893498},
               {-17.3953153078664045, 17.6676202426349604},
               {-18.8716070546254961, 17.7899492644379862},
               {-20.3076294109383610, 17.4262990158557294},
               {-21.5477670723158354, 16.6160766439370633},
               {-22.4576318804292008, 15.4470823145748035},
               {-22.9386258653122503, 14.0459947021712743},
               {-22.9386258653122503, 12.5646433896446688},
               {-22.4576318804292008, 11.1635557772411396},
               {-21.5477670723158354, 9.9945614478788798},
               {-20.3076294109383610, 9.1843390759602137},
               {-18.8716070546254961, 8.8206888273779569},
               {-17.3953153078664045, 8.9430178491809844},
               {-16.0387332884490803, 9.5380698937265915},
               {-14.9488677077162286, 10.5413618388044661},
               {-14.2438224123471446, 11.8441714344868938}}};
  Circle cr{{-18.5, 13.3053190459079715}, 4.5};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(tar, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap_dev) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-14.0000000000000000, 13.3053190459079715},
               {-14.2438224123471429, 14.7664666573290475},
               {-14.9488677077162286, 16.0692762530114770},
               {-16.0387332884490803, 17.0725681980893498},
               {-17.3953153078664045, 17.6676202426349604},
               {-18.8716070546254961, 17.7899492644379862},
               {-20.3076294109383610, 17.4262990158557294},
               {-21.5477670723158354, 16.6160766439370633},
               {-22.4576318804292008, 15.4470823145748035},
               {-22.9386258653122503, 14.0459947021712743},
               {-22.9386258653122503, 12.5646433896446688},
               {-22.4576318804292008, 11.1635557772411396},
               {-21.5477670723158354, 9.9945614478788798},
               {-20.3076294109383610, 9.1843390759602137},
               {-18.8716070546254961, 8.8206888273779569},
               {-17.3953153078664045, 8.9430178491809844},
               {-16.0387332884490803, 9.5380698937265915},
               {-14.9488677077162286, 10.5413618388044661},
               {-14.2438224123471446, 11.8441714344868938}}};
  Circle cr{{-18.5, 13.3053190459079715}, 4.5};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(cr, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap2_orin) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-16.0000000000000000, 19.0000000000000000},
               {-16.3955341355853683, 21.3703061251941904},
               {-17.5392742814063283, 23.4837528026345765},
               {-19.3072784457062845, 25.1113152913164583},
               {-21.5079559438721652, 26.0766219413571108},
               {-23.9028292219480285, 26.2750667989486892},
               {-26.2323765999666776, 25.6851452845819210},
               {-28.2441554728679094, 24.3707845479138605},
               {-29.7201583838073695, 22.4744159691706393},
               {-30.5004375148398736, 20.2015405090493587},
               {-30.5004375148398736, 17.7984594909506413},
               {-29.7201583838073695, 15.5255840308293624},
               {-28.2441554728679094, 13.6292154520861395},
               {-26.2323765999666776, 12.3148547154180807},
               {-23.9028292219480285, 11.7249332010513108},
               {-21.5079559438721652, 11.9233780586428892},
               {-19.3072784457062880, 12.8886847086835399},
               {-17.5392742814063283, 14.5162471973654252},
               {-16.3955341355853683, 16.6296938748058061}}};
  Circle cr{{-23.3, 19.0}, 7.3};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(tar, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap2_dev) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-16.0000000000000000, 19.0000000000000000},
               {-16.3955341355853683, 21.3703061251941904},
               {-17.5392742814063283, 23.4837528026345765},
               {-19.3072784457062845, 25.1113152913164583},
               {-21.5079559438721652, 26.0766219413571108},
               {-23.9028292219480285, 26.2750667989486892},
               {-26.2323765999666776, 25.6851452845819210},
               {-28.2441554728679094, 24.3707845479138605},
               {-29.7201583838073695, 22.4744159691706393},
               {-30.5004375148398736, 20.2015405090493587},
               {-30.5004375148398736, 17.7984594909506413},
               {-29.7201583838073695, 15.5255840308293624},
               {-28.2441554728679094, 13.6292154520861395},
               {-26.2323765999666776, 12.3148547154180807},
               {-23.9028292219480285, 11.7249332010513108},
               {-21.5079559438721652, 11.9233780586428892},
               {-19.3072784457062880, 12.8886847086835399},
               {-17.5392742814063283, 14.5162471973654252},
               {-16.3955341355853683, 16.6296938748058061}}};
  Circle cr{{-23.3, 19.0}, 7.3};

  for (auto i = 0; i < 17777; i++) EXPECT_TRUE(IsOverlaped(cr, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap3_orin) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-20.2520000000000024, 19.0000000000000000},
               {-20.4171490472964656, 19.9896839821358761},
               {-20.8946997273597930, 20.8721203482781092},
               {-21.6329020140428447, 21.5516834257441872},
               {-22.5517602351948447, 21.9547320105830792},
               {-23.5517018449996698, 22.0375895346843294},
               {-24.5243676543422531, 21.7912770996446135},
               {-25.3643542303152607, 21.2424864797317063},
               {-25.9806359936773781, 20.4506876539769991},
               {-26.3064292527714976, 19.5016843111756764},
               {-26.3064292527714976, 18.4983156888243236},
               {-25.9806359936773781, 17.5493123460230009},
               {-25.3643542303152607, 16.7575135202682937},
               {-24.5243676543422495, 16.2087229003553830},
               {-23.5517018449996698, 15.9624104653156706},
               {-22.5517602351948447, 16.0452679894169208},
               {-21.6329020140428447, 16.4483165742558128},
               {-20.8946997273597930, 17.1278796517218908},
               {-20.4171490472964656, 18.0103160178641239}}};
  Circle cr{{-23.3, 19.0}, 3.048};

  for (auto i = 0; i < 17777; i++) EXPECT_FALSE(IsOverlaped(tar, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap3_dev) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-20.2520000000000024, 19.0000000000000000},
               {-20.4171490472964656, 19.9896839821358761},
               {-20.8946997273597930, 20.8721203482781092},
               {-21.6329020140428447, 21.5516834257441872},
               {-22.5517602351948447, 21.9547320105830792},
               {-23.5517018449996698, 22.0375895346843294},
               {-24.5243676543422531, 21.7912770996446135},
               {-25.3643542303152607, 21.2424864797317063},
               {-25.9806359936773781, 20.4506876539769991},
               {-26.3064292527714976, 19.5016843111756764},
               {-26.3064292527714976, 18.4983156888243236},
               {-25.9806359936773781, 17.5493123460230009},
               {-25.3643542303152607, 16.7575135202682937},
               {-24.5243676543422495, 16.2087229003553830},
               {-23.5517018449996698, 15.9624104653156706},
               {-22.5517602351948447, 16.0452679894169208},
               {-21.6329020140428447, 16.4483165742558128},
               {-20.8946997273597930, 17.1278796517218908},
               {-20.4171490472964656, 18.0103160178641239}}};
  Circle cr{{-23.3, 19.0}, 3.048};

  for (auto i = 0; i < 17777; i++) EXPECT_FALSE(IsOverlaped(cr, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap4_orin) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-18.0600000000000023, 19.0000000000000000},
               {-18.3439176534886741, 20.7014252186325400},
               {-19.1649037307628980, 22.2184746144938607},
               {-20.4339916514384825, 23.3867523460956477},
               {-22.0136560473822129, 24.0796573935220906},
               {-23.7327157702750213, 24.2221027433549523},
               {-25.4048840251815626, 23.7986522316725022},
               {-26.8489554353188851, 22.8551932919272112},
               {-27.9084424563220033, 21.4939643395142674},
               {-28.4685332298302640, 19.8624756530710478},
               {-28.4685332298302640, 18.1375243469289522},
               {-27.9084424563220033, 16.5060356604857326},
               {-26.8489554353188851, 15.1448067080727888},
               {-25.4048840251815591, 14.2013477683274978},
               {-23.7327157702750249, 13.7778972566450495},
               {-22.0136560473822129, 13.9203426064779094},
               {-20.4339916514384861, 14.6132476539043488},
               {-19.1649037307628980, 15.7815253855061410},
               {-18.3439176534886741, 17.2985747813674564}}};
  Circle cr{{-23.3, 19.0}, 5.2431};

  for (auto i = 0; i < 17777; i++) EXPECT_FALSE(IsOverlaped(tar, pg));
}

TEST(add_IsOverlapTest, CirclePolygon_overlap4_dev) {
  Polygon pg{{{-17.2919517406699725, 13.3053190459079715},
              {-17.6005802298686440, 13.8209669304618874},
              {-18.1162281144225616, 16.9156461701061573},
              {-19.1263078416119932, 14.3153987730974031},
              {-19.6172767676191349, 13.3053190459079715},
              {-20.0560179084914161, 11.3655292518391171},
              {-18.1162281144225616, 12.4437470847894573},
              {-14.7650051430359728, 9.9540960745213809},
              {-15.2328843380972714, 13.3053190459079715}}};
  Polygon tar{{{-18.0600000000000023, 19.0000000000000000},
               {-18.3439176534886741, 20.7014252186325400},
               {-19.1649037307628980, 22.2184746144938607},
               {-20.4339916514384825, 23.3867523460956477},
               {-22.0136560473822129, 24.0796573935220906},
               {-23.7327157702750213, 24.2221027433549523},
               {-25.4048840251815626, 23.7986522316725022},
               {-26.8489554353188851, 22.8551932919272112},
               {-27.9084424563220033, 21.4939643395142674},
               {-28.4685332298302640, 19.8624756530710478},
               {-28.4685332298302640, 18.1375243469289522},
               {-27.9084424563220033, 16.5060356604857326},
               {-26.8489554353188851, 15.1448067080727888},
               {-25.4048840251815591, 14.2013477683274978},
               {-23.7327157702750249, 13.7778972566450495},
               {-22.0136560473822129, 13.9203426064779094},
               {-20.4339916514384861, 14.6132476539043488},
               {-19.1649037307628980, 15.7815253855061410},
               {-18.3439176534886741, 17.2985747813674564}}};
  Circle cr{{-23.3, 19.0}, 5.2431};

  for (auto i = 0; i < 17777; i++) EXPECT_FALSE(IsOverlaped(cr, pg));
}
}  // namespace math
}  // namespace planning
}  // namespace neodrive
